// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                1297420875795117831650009228129283219526969570091839441587649437148230680207,
                13517778745807695975310591834224252073356443415840467518948831699241340205671
            ],
            [
                10016406380798800011251214416134446669615967207786275935471370431336081631063,
                6353449340783746317943961786998777456419920402726806599820193478380789101047
            ]
        );
        vk.IC = new Pairing.G1Point[](13);

        vk.IC[0] = Pairing.G1Point(
            481324244214218461261694995604865934172204146581361941635015641847134048060,
            8351155718999648294466734942321862668362928049200244487129975036725978652243
        );
        vk.IC[1] = Pairing.G1Point(
            787064955132097202681181657400603110946938863628556899177348256142062294323,
            6076051664895667594373293675037922456537460897896420347821810341404323309108
        );
        vk.IC[2] = Pairing.G1Point(
            18867728799804362886959427079905986143370514542179144052334006977563441450173,
            8206295645668253417208550377978442818896469581531836986981468985985390800261
        );
        vk.IC[3] = Pairing.G1Point(
            5833782873949258155125005840204230455028520877511618161153141074081565238812,
            11424804966092590313171480477514503085808098880599541212778533891908814089507
        );
        vk.IC[4] = Pairing.G1Point(
            2243416053850900836675721668983303966693120528046214977436622983539261873891,
            14656023802790947381911777116388170198314626258833946351125514764757699550322
        );
        vk.IC[5] = Pairing.G1Point(
            18442364218383854807664820538094040048199344388735703762450384913811498982310,
            4827605464772802777605112264838478492395794529866721080611319512598843175942
        );
        vk.IC[6] = Pairing.G1Point(
            21045735090649087233614103398769442815163543040718290314404187935861948397673,
            12631413177827391269354018717847524903949843855179822398519765488742439324380
        );
        vk.IC[7] = Pairing.G1Point(
            312146398753821339619543218188972625433956903281828537501577957636094208717,
            19219070032862478965946946157635001974007878754031190320596407165731519592575
        );
        vk.IC[8] = Pairing.G1Point(
            3327175915057794380079092759133439039324375977275103114970690312258476499505,
            10273930385519523308142488136369866444980930614809964450374905385893422114680
        );
        vk.IC[9] = Pairing.G1Point(
            6365307545456207584654744307155850988117399394928144096829959382495704600432,
            18548182714340431388138605220021440315974724245603151426668067149880759544416
        );
        vk.IC[10] = Pairing.G1Point(
            2870954635068743288452164416097721331951188391557997409165839502645078550978,
            12209716679828126877968977621321756364354719262437817653253683770991269020613
        );
        vk.IC[11] = Pairing.G1Point(
            1219362619253040788272678658693851621342395260153240822662208430494565939384,
            12465489190315309523236403667080240678340290795081342614930956599914113753624
        );
        vk.IC[12] = Pairing.G1Point(
            11500187170307167424705347768924683361604871259073847660522960275623790902673,
            2198385961352071797247321065462929370651056371768911535171587325742982908140
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
