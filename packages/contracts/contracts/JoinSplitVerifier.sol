// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [4252822878758300859123897981450591353533073413197771768651442665752259397132,
             6375614351688725206403948262868962793625744043794305715222011528459656738731],
            [21847035105528745403288232691147584728191162732299865338377159692350059136679,
             10505242626370262277552901082094356697409835680220590971873171140371331206856]
        );
        vk.gamma2 = Pairing.G2Point(
            [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
            [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930]
        );
        vk.delta2 = Pairing.G2Point(
            [13397605322717655718715081262151492790366328635173860444245978547623106326517,
             17073364281232344634852079720627107006800570950714173318302728273166250454989],
            [9644434138065820218732808526064185032271803749385061411457636740082029912940,
             17636093643520606885511210734594289178099437504827455265455777635441867388453]
        );
        vk.IC = new Pairing.G1Point[](12);
        
        vk.IC[0] = Pairing.G1Point( 
            10794760184618646041627620976831954563937146867324305942089709139480724744424,
            11335940103382672483552752424685604166121991826534532953296031990152912097446
        );                                      
        
        vk.IC[1] = Pairing.G1Point( 
            1795887381530981917214366517080045678373024148435749876965049084882268597723,
            20930345858481400040870264822903861016241298738221677399782947579301364300919
        );                                      
        
        vk.IC[2] = Pairing.G1Point( 
            16018254102253041898468620504067851427499504595335003958200688166308705967679,
            7306182805790136442584082881049857795659248785846568381823380799247221744609
        );                                      
        
        vk.IC[3] = Pairing.G1Point( 
            18273732548677194964859047670775125820455497758396193511172183571277016937612,
            6721838429270446344905689913208563428427861146039590497462223048446468390080
        );                                      
        
        vk.IC[4] = Pairing.G1Point( 
            6967005874028679313309490598018389320556091859138311281387204339244516872497,
            11076762646875467362574092741340183334354400088605528840263469283101390500604
        );                                      
        
        vk.IC[5] = Pairing.G1Point( 
            10134070107831553881696131896427208337385913507200878458659520030843268767075,
            3533164578108297216168822282760179093907557382403489653386084764343063137096
        );                                      
        
        vk.IC[6] = Pairing.G1Point( 
            6987208870109042317362895689999844988884564390685619646346998124828764500921,
            7019700190447696853707748891542070096575787238752298994599764887955200667549
        );                                      
        
        vk.IC[7] = Pairing.G1Point( 
            4944923235225152425761886252425177284107385191540499251075059190379625203035,
            16046983004714538387192043260890914177647928746292239273702506097665040897854
        );                                      
        
        vk.IC[8] = Pairing.G1Point( 
            20925223025691197085026677010009871498183120055741283815960812236718876535717,
            7894517998735198215906711882585314111284663123327611060764513551055677905245
        );                                      
        
        vk.IC[9] = Pairing.G1Point( 
            19263376371155473354295819722797383534432306800000002339766753055243912944838,
            5490874970840532939534886980444157357583808965872936611183403796324729573832
        );                                      
        
        vk.IC[10] = Pairing.G1Point( 
            4533222079174850532654966290022003618642537300960619536824533135945070505164,
            2124125067098476026737573408587324110085893745946364610429144911712686287291
        );                                      
        
        vk.IC[11] = Pairing.G1Point( 
            20372207733156692654191921214376519775144054218764050798631226304776912857151,
            7327379184108017684000886786363459763574225637781165375638042057556867766008
        );                                      
        

    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}

