// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                10818132835208276213223537076004832735282470823003126609985559049666112728547,
                1406048057590737465650561692003038594618734848258949637573256781267052245965
            ],
            [
                10246727005490743362654588589401505730502275936121690787745570250773127429196,
                15578974192326894860404642518107235843620252964711059444480085334554201540477
            ]
        );
        vk.IC = new Pairing.G1Point[](14);

        vk.IC[0] = Pairing.G1Point(
            15408227712520189550308915947375525781087648633865099180130126200547382927496,
            10584813042576903284063965093072566024792325041915635250797769329211994965553
        );
        vk.IC[1] = Pairing.G1Point(
            17940202192322939964929645328894531289437615705896856517507235200738930784608,
            2880946084270916116786458248149316627469827035364842682598967649650290396029
        );
        vk.IC[2] = Pairing.G1Point(
            17458686684561543054692172833733869955548666210647130391300891660346324851452,
            17775016247462802091613867359921616745076257054951390831406219148895062194510
        );
        vk.IC[3] = Pairing.G1Point(
            8293635909038727811155095434184625313778569606357450240188821028429491251763,
            524665548143641803579179546267459460722956999899439768751213239856820844670
        );
        vk.IC[4] = Pairing.G1Point(
            6552142510227534980712239777442437194537078397538770479661790306205288117470,
            10516959743952298768231480974044725682280323352841269315466550493149398302561
        );
        vk.IC[5] = Pairing.G1Point(
            20879048217911416868581974725678119542193920606731392666160205076800276255403,
            8108336373294546285000206079209553518700557484613398849575868543744220336974
        );
        vk.IC[6] = Pairing.G1Point(
            4069278983575393854565995742054481316331867219023269786284926593573207548823,
            6833400186455257655010567786584042008101028142158013633134648237664133858870
        );
        vk.IC[7] = Pairing.G1Point(
            20580219777055391780831032710179490453972343766462231742052063762213752700704,
            12945910015604314567202433482454070395025503490651791026479342364945046271278
        );
        vk.IC[8] = Pairing.G1Point(
            13081374699652552787508545305211510552459348461585251026458868391598244131380,
            20307856784137459781745326646930377904912752572374873675912848903726942462119
        );
        vk.IC[9] = Pairing.G1Point(
            8511379771447060594408512200688593469599892889874942147870281308261116209692,
            18882140731245221147786444525604247482953755074407544499157906522492026725902
        );
        vk.IC[10] = Pairing.G1Point(
            21160740430930817286827925204514273509716588046835296244767623282913824204331,
            21567258772576856863491568867285533911942140326938636693895734765044661879606
        );
        vk.IC[11] = Pairing.G1Point(
            13925498067631943068443167666210572357936174352710630733052892939184955212099,
            10406978201960039884351534631284365765935168032010250259298023477360086082732
        );
        vk.IC[12] = Pairing.G1Point(
            13986028705040148118614090991295080243729556208380448876457946348030850149365,
            10497978908990804765864110680957425623602893033695249261137505446640846878034
        );
        vk.IC[13] = Pairing.G1Point(
            21794228423640891099637902791812252592533345128584602525041223243318082636047,
            12314674844269402862968272306880397414019016651773784700389408109823863084845
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
