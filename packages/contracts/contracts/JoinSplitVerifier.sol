// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                14568501002213016057621335673624181114194072926926522880624440069686026363393,
                18424981090864814776145570322173789171179494306041307012571052936471945539793
            ],
            [
                14167261868050300686186794880332924568940268901344286856578637476636254794073,
                14401652394948435966724043148230098733520611911224118524626728761653283516431
            ]
        );
        vk.IC = new Pairing.G1Point[](13);

        vk.IC[0] = Pairing.G1Point(
            20383026385098236014997127517363280216679148837007254392522627987909600411219,
            13282973091315503429027634032231314134050531614438933958543114712995650106377
        );
        vk.IC[1] = Pairing.G1Point(
            5467561355341786190600273695435492340525723721471821537101392487875153738010,
            14625893804175072518686182001337733140764008013451406262596611621397056058646
        );
        vk.IC[2] = Pairing.G1Point(
            17813790946272973502273650635043660628511752819300158159076589641028978935605,
            19443073324156462756641569327429487965981213295329844996195738963415800652906
        );
        vk.IC[3] = Pairing.G1Point(
            12727573261920472972976262151197246281397033354968487068163114352645650257077,
            2289873270180637981803865309893464896842342861757500719601745499761635329200
        );
        vk.IC[4] = Pairing.G1Point(
            8743567736728972323759112014673428275092688102119322289969834634200327639569,
            7305461400674527005314087135366930952943113718955768084678272300553286754523
        );
        vk.IC[5] = Pairing.G1Point(
            4757301320086322519345568385582987931894340929462176788069094567413483933925,
            587088044951935484360806316168066284736229373119549248405181056824417461137
        );
        vk.IC[6] = Pairing.G1Point(
            13230244876400498330156718811113883599040117345837801043212979283177636704702,
            11327667370531208438465556019906235899743675563068715319881151187542187218908
        );
        vk.IC[7] = Pairing.G1Point(
            704725933320959501071402979366653054906049434707258095755381874520612324922,
            15470766039682308158542487224185316485055893425357586775354858337099110898765
        );
        vk.IC[8] = Pairing.G1Point(
            3607051018934965745048115945492704754315530913605522120068761968173288755725,
            19455650840112481925713944551781631429705263103015684044789229341967601197804
        );
        vk.IC[9] = Pairing.G1Point(
            19102456075257194798151223439129129718960432549487389949005708309450978885490,
            20506990374562286709278785841262183728753906869199074545637007220189354550821
        );
        vk.IC[10] = Pairing.G1Point(
            19620753195600144283564766125778505344030743797713121486994278030553356346311,
            15200600779018052693117558750219939162829832404845301691944526458760943217252
        );
        vk.IC[11] = Pairing.G1Point(
            19288078317286580359409225250218753565799587855246548214143420909226158976774,
            692622397749089364868418511686910149043175420902033843867642430224846169575
        );
        vk.IC[12] = Pairing.G1Point(
            2016635502918182321808128722987017731269954830840426177364626210978778864226,
            10958611795051813558875086029446999047736951775961916779770757852913936023788
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
