// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                13904684753230708070641495302049064878266412236000122611192979256835728409039,
                5555620289888792158047124409837232391271055912488586971697911146339082252889
            ],
            [
                14606603705301527835312389361726137656501564871175216728850007884687215664049,
                1785814780025741939467129715498114187765913986838498594375685849666200525905
            ]
        );
        vk.IC = new Pairing.G1Point[](12);

        vk.IC[0] = Pairing.G1Point(
            1047751525303436999942522327063227997081690115502740102551245020006925872023,
            14229101158078949972263187421627774786722178878952349213207665406187391211834
        );
        vk.IC[1] = Pairing.G1Point(
            4397401259385590823021985102694276957292626267145340147492564125297913888471,
            3793838169017468601934128068893641894810186959186436446585286839352776690260
        );
        vk.IC[2] = Pairing.G1Point(
            19815613525322704073191598941364301117395908277476118827642647711209957128751,
            247031669087729032708405854388514312970571283480402129572845229390530143995
        );
        vk.IC[3] = Pairing.G1Point(
            8849949268705312189945775102488040970001297156008073661173263194720663404412,
            5031740512945348351007921107202359527284618879425751124229896156962383611698
        );
        vk.IC[4] = Pairing.G1Point(
            12055401328134454574028918982662321811243080909686071444243405905409339094445,
            4386968824694493892813515219036595459131053409401619986132383832297047900143
        );
        vk.IC[5] = Pairing.G1Point(
            17378593140674177708639911511791061295194196239793362934514565723608232407565,
            424708059620710703126126124982781886279895071243441049954101589429409977381
        );
        vk.IC[6] = Pairing.G1Point(
            7790478305148290362864197099158519298294504724721381261211538470256654110002,
            7052776711173459915477842417102765787048959995945472055099410960535124712424
        );
        vk.IC[7] = Pairing.G1Point(
            16819925714169957006787382049927979042568008025253222328834534439314315884557,
            7697861399091799864769766675581283179066686539435829102819651228057796609225
        );
        vk.IC[8] = Pairing.G1Point(
            11551248514514931318216029589196026388071861816188472676154585694276849257293,
            20955015088756982865627618824667167810137725217939770614133110882179061163227
        );
        vk.IC[9] = Pairing.G1Point(
            11582600917724138440450566158915381528857882274737452443693589453555449136592,
            21205816061310534291135613709743183274146660477093978325597885289450892485082
        );
        vk.IC[10] = Pairing.G1Point(
            8672973490155684646863748439369265611314121335484773561078940617315634754411,
            18366716111423638396170631647377737581522373050355915465828148310229479009692
        );
        vk.IC[11] = Pairing.G1Point(
            8033276156834306208940339085123868677969790444657825321767167222211388128718,
            6507265162165746624062524820903462430266065522325188283767330568676049042783
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
