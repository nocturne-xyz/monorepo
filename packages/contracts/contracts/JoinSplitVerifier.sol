// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                20500437055977496491354196294223216660853882081414328180802588507244782023603,
                20097239769588751647634764047107221167959199028673327993679665386085052618811
            ],
            [
                10694906573024279124537644130381119841184829247025842108636820842592821189972,
                11898415020123163358066713898208044476243479283574078653647062897873730258110
            ]
        );
        vk.IC = new Pairing.G1Point[](13);

        vk.IC[0] = Pairing.G1Point(
            5261851558943444776174136027815746745853650167627597792689837354941559956839,
            13849396956661506170821291496706210596256073483369661746186945767797330856532
        );
        vk.IC[1] = Pairing.G1Point(
            6300301025397892041382707813380183638863207342448014161476676561376520091261,
            7756976329768949866006672054982633894806104153689452152545634132405342328959
        );
        vk.IC[2] = Pairing.G1Point(
            1138597057191543380148462155523302564429488096341162004928642679393936596883,
            2638456186505793159214296370990866148925857767942182543123238620296063342654
        );
        vk.IC[3] = Pairing.G1Point(
            13542380095928636689150774244430885575177557470092557124532264953358157596322,
            12868898959220832772205793758845555074583602261773116630597906016551228662803
        );
        vk.IC[4] = Pairing.G1Point(
            656661078817785726623600341688468913201788338221867544724323568304279467518,
            14676808453163084239115755226175298027066773364921967035627799965831318911397
        );
        vk.IC[5] = Pairing.G1Point(
            14208578652575422530229656522994103718645851088589210889578694543505312744240,
            19881882544392389906041019485366089327833719502503667348805721162287215829640
        );
        vk.IC[6] = Pairing.G1Point(
            2279352064011245461297544407793317679076327171723646861486599866463152348544,
            15973804663312132028577557968538622151729732524479616922374396827100708891773
        );
        vk.IC[7] = Pairing.G1Point(
            18040020814504939341785032143774434041444945413983725697121445993515701040056,
            6017231974996233053967701001069088320720832573537484824253040122737842303902
        );
        vk.IC[8] = Pairing.G1Point(
            17127250951649494424169846130285940160045885639599005491942124029681364428482,
            16017606835438937281741613044164166791699296080255508552232665851820109954703
        );
        vk.IC[9] = Pairing.G1Point(
            19470504317026013792360745009140354487897923144847164437055233550633501437220,
            21807273680670933976661298560688358859405741697892775183022002414683083460410
        );
        vk.IC[10] = Pairing.G1Point(
            10523135868278210806913527031309167790239739373983702537823605542392560211727,
            2527269748192897401963167863847189082367074410627037297564184570773113329278
        );
        vk.IC[11] = Pairing.G1Point(
            8718041483278655720476404095652382439568617137224947596840042624257446595897,
            12704759646228250828044114537302869084327223728768477228983818747862957787822
        );
        vk.IC[12] = Pairing.G1Point(
            19916438268015919618203653905172130482656684387629412679185916567846267292447,
            11549239666326339386193877077022820800104078034091407953657152468733821976461
        );
    }

    /// @return r  bool true if proof is valid
    //@requires(...) all JoinSplit.requires() in joinsplit.circom
    //@ensures(...) all JoinSplit.ensures() in joinsplit.circom
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        //@satisies(1, 2) because we implicitly assume the verifying key and solidity verifier impl is correct
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    //@requires(1) proofs.length == allPis.length
    //@requires(2...) all JoinSplit.requires() from joinsplit.circom are satisfied for every (proof, pi) pair
    //@ensures(...) if r == true, then JoinSplit.ensures(...) from joinsplit.circom is satisfied for every (proof, pi) pair
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool r) {
        //@satisies(1, 2) because we implicitly assume the verifying key and solidity verifier impl is correct
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
