// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                19314428411297078017396972423642016349149538452141153017352090001883433818614,
                83092189085481283807582596122390184068863259510928892218957487198599070995
            ],
            [
                8138976833522768983391056920786075780977770096541273049875357488766869969336,
                12060638026175943493843715629272722462532767485176726011202689575732503603146
            ]
        );
        vk.IC = new Pairing.G1Point[](12);

        vk.IC[0] = Pairing.G1Point(
            11669017673484509028567279495715918078425896599528036977819367833960018309109,
            1688076894662743402355290596781029736389513189980679668443611775074714615516
        );

        vk.IC[1] = Pairing.G1Point(
            15576881488089161199059673959089145153014660329802892916723951346991940962767,
            16652657069658186232205014498845681421129876172531288207944636998579399783649
        );

        vk.IC[2] = Pairing.G1Point(
            15364121077008472678380000654115405753998059698314172164240650317007227697920,
            20816900748359269008157757064012221024797156776909033342773323837702519878089
        );

        vk.IC[3] = Pairing.G1Point(
            17594984031044734066651444814516556489557732547068070464754337362992915845572,
            20963269338745362431743354031597622006700708890446250770736615020610752460321
        );

        vk.IC[4] = Pairing.G1Point(
            18190714200765791617886994274873505419234554718899807285325255467025175172690,
            21836649157865647153696776088440739824816697112613464971346264786313917005984
        );

        vk.IC[5] = Pairing.G1Point(
            7277354238410533995588058504728443886887051143948398802689639717366853054880,
            18025338707232574686862539914583374822987063472685959356449724215367462517674
        );

        vk.IC[6] = Pairing.G1Point(
            18895102431327603315165944704259254348173951256452829476727937812319365746478,
            777215819219288716445353585644327291008670071465471132529564148594726563365
        );

        vk.IC[7] = Pairing.G1Point(
            12068368933584029384876399804552966650398384679364432258743221866062207049347,
            2946346426381771090091876231872490241160959386140775175044029063467458588866
        );

        vk.IC[8] = Pairing.G1Point(
            19004360304173758224127203279599428981162687276976703624895627288716409565605,
            18240829816185555192259992081946463524719169949100765696562348354574013139938
        );

        vk.IC[9] = Pairing.G1Point(
            3389167427774966358339470316730067482985242992519666135226924407660189476271,
            21427396325248328711462094743287915154636701889417327608765383767579038562739
        );

        vk.IC[10] = Pairing.G1Point(
            19863985756106615051306235823464694990244588711381963382888945809968815120328,
            7078910592946028681514599146437137503614815815612787876155311174064949664223
        );

        vk.IC[11] = Pairing.G1Point(
            11938144498657096586964640404066406911567599223389866027645666279923145123851,
            16454544408087776936989659972601860395570901054384560502308456797541068318573
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
