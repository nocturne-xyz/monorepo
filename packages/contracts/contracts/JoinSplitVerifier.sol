// SPDX-License-Identifier: MIT OR Apache-2.0
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                3773230947927360372604888072038522976403928909273696189504388030674882749012,
                8126580746469168269922874193106593903331864814838565296604779560996582570711
            ],
            [
                15104391647884036283330439690519637734422977071217633573270533359673368635795,
                14079386660553087738853171876318659773623001678511633727190169465069298540563
            ]
        );
        vk.IC = new Pairing.G1Point[](14);

        vk.IC[0] = Pairing.G1Point(
            4424710435000273709562441844668539243247296190311655776559964874253016350738,
            14608459998718833089078392816135331133792750920842207166560724453290355847456
        );
        vk.IC[1] = Pairing.G1Point(
            1689389297508878950448553917307810916242024680004205545950554540955453082145,
            5641714425747458687495145903221700812620854545171484548507803490064191165013
        );
        vk.IC[2] = Pairing.G1Point(
            8501714063044924132701375568446590812100150499095028853014191044280726103428,
            7273532493687484940615844550610088027068823975435735796637612988104919260850
        );
        vk.IC[3] = Pairing.G1Point(
            1488548253144598247400285973558453802915668069336067404408368281988532394954,
            9369260028380621367984921121516492036579969900491278870348860302540348776963
        );
        vk.IC[4] = Pairing.G1Point(
            1227178832179240800909284972519398087218383226571568589950431618654612794085,
            20164530304744606215252465848411353924078684485643725669895014792463994368963
        );
        vk.IC[5] = Pairing.G1Point(
            19249886966348008090315532343836361789966873135232474366159996965485212141871,
            9589502647473543062421959056764799445173527772808887628737596608841354931730
        );
        vk.IC[6] = Pairing.G1Point(
            13365033504413763157714155452278882838209375261052063134533301717863726405277,
            13841787263771826745674615810126527199503678946933174683053623030876146036336
        );
        vk.IC[7] = Pairing.G1Point(
            1206065078505412677673124130752009149661482131201338910229976838599792559868,
            6388060481707480391769140574231023740243994702963508739611627503650819187230
        );
        vk.IC[8] = Pairing.G1Point(
            14890744158667107743287463426606535714930870723650297964574894596306432021853,
            17995020408068854846088590964198640060763046718958467145776448443174984527872
        );
        vk.IC[9] = Pairing.G1Point(
            5560774876147100092851696216749604514390257254756482704330331970369616566913,
            16718385004832926270396316720270167543022680406458422125659012703800318199366
        );
        vk.IC[10] = Pairing.G1Point(
            7176035585247707747968553339302279810254365126049634960234519646719989161055,
            21307838591445994116110813000935384973964405408746000226335394027393089466508
        );
        vk.IC[11] = Pairing.G1Point(
            8334968616597397013349778851207476397781531455727374227337144398147967358511,
            8332973701396280907503719499565623433341372061205589812895045336514051254687
        );
        vk.IC[12] = Pairing.G1Point(
            588412342009047985439562017884221380063128356387102893978978759262048142125,
            294300258270479217823517838984995897747885542576499953639833947340408389096
        );
        vk.IC[13] = Pairing.G1Point(
            4634924756950153735989567369686364424603370372471644172967097811523586018868,
            18896273596534985183132002063524010749159929314788940467931152262164388859029
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
