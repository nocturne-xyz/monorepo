// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                11153156977002246119881329920490505062844120563651238829115624359418093297352,
                8954129990496036940250162914281377479747862616959110461524440429555665973148
            ],
            [
                1240260641354533541305273489856336803590668331531832847208202818122645342053,
                581784601336207945439263984833222088117943922520151460929034943041221795261
            ]
        );
        vk.IC = new Pairing.G1Point[](13);

        vk.IC[0] = Pairing.G1Point(
            6596629112659064659785891897883972608735971752135896125151584796342701819662,
            16073568847383602219787552706823589551134405591709686232064643055139596282819
        );
        vk.IC[1] = Pairing.G1Point(
            14146393785721405611159472845250529015140978900286746242359195628354350612930,
            1288795323872984378370871683385702943476388429752523777257934395415939712110
        );
        vk.IC[2] = Pairing.G1Point(
            20010074850471792532640712290678106235655562573263435375369339454274752822200,
            895332601954367110693890887318229508104450533892905258318262063767264648714
        );
        vk.IC[3] = Pairing.G1Point(
            4012215359451469483537658758428318907574648377206145517219754167148586556980,
            21347887419999253657537098698406401440249621992066712467473423779600701210604
        );
        vk.IC[4] = Pairing.G1Point(
            21659927263338696566187815958368220091107953006971214806047809928206410019615,
            19852188536548543673672558994121696724940608138969707197802757234217902619411
        );
        vk.IC[5] = Pairing.G1Point(
            16103979334212558302284161940434385019125034140715939256404605611003702608878,
            5498063403179899715485588097878153003520859532058426109186507212156407164046
        );
        vk.IC[6] = Pairing.G1Point(
            6063267377675859081410806641784617903714660022314811950937341642641931134597,
            17120866682621382276300593308545074715857879341734831040967854889858967894420
        );
        vk.IC[7] = Pairing.G1Point(
            4203465070931183772582708037103010060293153890640374100385062129552578584285,
            16939537540713620097387696035701191161214048749906531443547104568671363778190
        );
        vk.IC[8] = Pairing.G1Point(
            19346421695607221277245023134818887019602277224176769074852963144258444852324,
            883190061975718000331570689367158268342886380793918790064721507152155046823
        );
        vk.IC[9] = Pairing.G1Point(
            15631863694323385705444601993879217650810239179409503555103527395365111940143,
            1476077964934436235713889692178171041156306519464207665753661128179604020943
        );
        vk.IC[10] = Pairing.G1Point(
            21159089651114971261179741012207787217584013127014731428186783718199720442314,
            17410053346619580206274698756029121612688409300092225752199994674427023476275
        );
        vk.IC[11] = Pairing.G1Point(
            9428507527411080821265846390428243035245261786618922234518639050190050250513,
            13108820685633599103599248197078609066340643381815465903347463136869798994330
        );
        vk.IC[12] = Pairing.G1Point(
            13849336357419641018095170457951331652536471169137222569992812272166045111611,
            8351491660245470675373419384704565161967493430186566751638112269121486099818
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
