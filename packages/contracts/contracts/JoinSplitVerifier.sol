// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                13132269834823642362170450908824742035401612211343794147927765680336381702818,
                13766492314398821066508290563101909589426006479228088452417452036470986407256
            ],
            [
                3528682641170640152240860403403458444092877109298869608995643698139108517356,
                21366336083240139953836639360677984076151077424024579831726032822605341148122
            ]
        );
        vk.IC = new Pairing.G1Point[](12);

        vk.IC[0] = Pairing.G1Point(
            13882835903906781152647338426028454262399830365189455653938368016743848154863,
            11398381805922158797186918309150541254393458110132801972413348336556421628789
        );

        vk.IC[1] = Pairing.G1Point(
            18312765132449865068016292878298176621048230682476638587397178605825546714955,
            10511304293734470339334649901998253476804684858836699777896324637618204044931
        );

        vk.IC[2] = Pairing.G1Point(
            2493843411593210395626428184362600055824805601161881138566975773657371060747,
            13647824051025930242199388520845599786178321215912534889942112892746092843492
        );

        vk.IC[3] = Pairing.G1Point(
            15441941858734582703421307525018247512351206435204705205989971325612834445570,
            12642533827013398899878353688062814795115537909125082673900614986020364118274
        );

        vk.IC[4] = Pairing.G1Point(
            21312058543898436541086482942496043050467773678131047979709062955161335334122,
            14776726514950904873557126273471593757838099484746216594445883215453382187585
        );

        vk.IC[5] = Pairing.G1Point(
            11119435200364013644109759329042081596619820744501981523399080480574194413885,
            11129990553933200623543674428839376828260836588230120488338862971244566731314
        );

        vk.IC[6] = Pairing.G1Point(
            20809567193620631039241726529677821962056770989620005261492144613138102999795,
            17880822484823783662912479305578247352431094797017236777340394876813538176430
        );

        vk.IC[7] = Pairing.G1Point(
            17663238626147437427720622140639687450258262931154094430501143216544696806391,
            17790962203778419011057929022778056734771955069146931197977922316851478874887
        );

        vk.IC[8] = Pairing.G1Point(
            7748299471343318928116632090372906165473966636435497486200186454467133184371,
            5257615506488808302397724805240344033990663140478850640092485284187166953425
        );

        vk.IC[9] = Pairing.G1Point(
            8147670837037050815541980784572070350632458890112254238326762186318759452791,
            6437973710479275713584103459097191084806794530527783257020523298216571714851
        );

        vk.IC[10] = Pairing.G1Point(
            15637974578048285418399060664571081950638161667638682228212039203184491995731,
            2670186475488879564305039199080533017203450460036317810130038255020173519474
        );

        vk.IC[11] = Pairing.G1Point(
            15263200802694033387238602544373207686082102706296024922665829366921980268226,
            13075801905091186908147253461964524753227143679725955165152064766461928087762
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
