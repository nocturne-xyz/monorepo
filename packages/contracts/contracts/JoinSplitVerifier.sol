// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                10358967610702975643150701841937432253050302928500037760818882850827799254841,
                5451930258746991521985260874871056953720990827135922101510309371674490889779
            ],
            [
                5977924505921083138822019668312240800115395817016908021121728147164381335564,
                17813748464660465586084763250087041933273777547035552412980628055411644471276
            ]
        );
        vk.IC = new Pairing.G1Point[](13);

        vk.IC[0] = Pairing.G1Point(
            5709700655901224292598221563098783674847106991485416582549559267885797860033,
            20598624093190921371448853272530635312906858044151762350566656621519848656143
        );
        vk.IC[1] = Pairing.G1Point(
            12737946490888197098037283231075030292743654019993345829272247562888275016360,
            17692101105856707860439861834703601136274828765268938516770224297494456862702
        );
        vk.IC[2] = Pairing.G1Point(
            1495089139234767516934403461028356593465283302927261311264915456084728763821,
            13297096623157508495250151019781616462229333911326148408283519871707874721633
        );
        vk.IC[3] = Pairing.G1Point(
            15504801271222415405959702963489649332722947300640766945927920407220895093324,
            3801548328855655959497471151067139962378605530862944586070564302804305435608
        );
        vk.IC[4] = Pairing.G1Point(
            13469405585452863565730329672485567973179148069216505995364915620220948013440,
            4304513564484014358337426101075453206100407790338582666216228135622617291276
        );
        vk.IC[5] = Pairing.G1Point(
            2838113599379462211215578993245857154827665474164382141859709736343615129943,
            4435484160738221246900976392415516545575989578388861194682094037836251373001
        );
        vk.IC[6] = Pairing.G1Point(
            8093741340744845814358422952059026174830266038021019130640314561725784968495,
            4690560589672750599072770339654636736777942131249629419621040585326466452880
        );
        vk.IC[7] = Pairing.G1Point(
            16337873346567548757550643708020986970400887717577960518580914530739974179656,
            13013341233545365356321474801856927521422976396002309468790429739313479733994
        );
        vk.IC[8] = Pairing.G1Point(
            4112880940255450911840166582953406669672944036650611626591680635147539936040,
            14314211396530520867661905481293594757075028042036848258733853933373843745109
        );
        vk.IC[9] = Pairing.G1Point(
            11305258457828808558513277720565645441736545843377413982878471599189910974797,
            5524062272467608639785074868906559916633342863802177669606904138639689137719
        );
        vk.IC[10] = Pairing.G1Point(
            3560216671518773024223884273795680789022011351250177418622297623125546031637,
            4264817076741292009803028246335587938691458317623143744122180892111588725093
        );
        vk.IC[11] = Pairing.G1Point(
            3644211287950521283645625794849551474686573730071693253109426187992905665451,
            10318394673955401937371218005257374244662900463038447176976231577390358543737
        );
        vk.IC[12] = Pairing.G1Point(
            5615935618615423488770424184120738973188394193515304006854419192837524845150,
            21826771111121608639019002866631065013777398797907039883266315223426069196082
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
