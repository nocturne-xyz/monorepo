// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                7984996542469770298534559086474679256001468010453065661903168342439216361983,
                19685803317473973798099449623156602305897476243737397856176106367752625890261
            ],
            [
                5452787151422099907296092183080638149658319110943912836094690331586993353228,
                17565716084547940487762311796232621571807080528596438232498407774745900585702
            ]
        );
        vk.IC = new Pairing.G1Point[](12);

        vk.IC[0] = Pairing.G1Point(
            4117781757111789884111771860946436330750943542803165340708229653389831370228,
            14703757822272063211762407720484561983201541071002096863314284806900944536956
        );
        vk.IC[1] = Pairing.G1Point(
            2939053844789973948966646619493788389261859571851452260468133167895666304608,
            15076717968572892945703132589833150570211664996946666407789828020920800231828
        );
        vk.IC[2] = Pairing.G1Point(
            21424725966527943697211552454125844239556828271278803442245100760034320369126,
            5570192739625124368505996814532932573574930524442289323404616840517117247173
        );
        vk.IC[3] = Pairing.G1Point(
            3006328560325752504462195106753145356674785544353715512663175151866448580537,
            12638607814232679200849994136447470278168325591764872370272316648424809462440
        );
        vk.IC[4] = Pairing.G1Point(
            13456869090569283062620652983300617865639677266773922723051389272797230139618,
            4809008803304546554074112918071257753777382884437927394465875852551143000543
        );
        vk.IC[5] = Pairing.G1Point(
            2925616569553061580165084177618074981741235297256708990508190993729278289815,
            4847181350865783679842892564972310192669043597445546625138086028135200082168
        );
        vk.IC[6] = Pairing.G1Point(
            16480364762443038570660393235048737071180269973698928347687994321906876993335,
            21175625507563340692308837456645791637350776525929371995882037460728439375306
        );
        vk.IC[7] = Pairing.G1Point(
            7923386805500407082262135380068198397745932108540067159061095895337322283943,
            9023398179607126481939427305118532954752830208561813508079158493644448447540
        );
        vk.IC[8] = Pairing.G1Point(
            15305142542146604786557561266881740383859969432455824554871241409167694106618,
            3703782298796472959129384613249796048877420836281588049457689360736945258768
        );
        vk.IC[9] = Pairing.G1Point(
            8625621048487467453296847867038706132310103981700964264295738894560298043220,
            427161087255560344187857983313423044830979345983971449825027036206754624943
        );
        vk.IC[10] = Pairing.G1Point(
            4674991426712955428603563298368196352549005164088477107535844513262610050013,
            17999542816551434024098698727403764160070529122974822372139624574478753347877
        );
        vk.IC[11] = Pairing.G1Point(
            19177656103148359670693670358343558744402999261079662171788090951670719329695,
            6818800195204824586477080299548143222416814629019698105926063265055028590137
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
