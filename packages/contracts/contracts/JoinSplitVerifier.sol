// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                19917500199205163203525635287073986949168509858435009895575000793550233245681,
                21120280310968549945171841145589340857690531468307705027563972275858881290000
            ],
            [
                9717584865233218014238688029010900469445257694328454592645666106740472691556,
                15360296243532882866295688876211676907285334005207230701995753168782726109214
            ]
        );
        vk.IC = new Pairing.G1Point[](12);

        vk.IC[0] = Pairing.G1Point(
            16690069606777690889400254352711095376966530513446159603212194213391761165212,
            3808315493101992228658797234809171070229490453290937425102452721976626925993
        );

        vk.IC[1] = Pairing.G1Point(
            12645887043888284283689367902893681007961778514582764954036662154481484676701,
            17933912445249404677324184075444667560018922151514896709380746659075057802585
        );

        vk.IC[2] = Pairing.G1Point(
            2026758957436313291999978603172329412574350397953123273567543296110140384380,
            976107228166465544540766348575221668319271866142847830317946963323858047169
        );

        vk.IC[3] = Pairing.G1Point(
            10464774457094109465995128970552733385441651611942621078041461762932249836738,
            15230834317573400905606605382942619834929798278280016478625679746937345561895
        );

        vk.IC[4] = Pairing.G1Point(
            8856902549121055137321016735720023958902969712516250431213080571179517730629,
            13411746252534078527317575901126359123884947977835098355122932005712575753653
        );

        vk.IC[5] = Pairing.G1Point(
            8270280111456657961829548828240077394543900349879823858778943598242835490031,
            13659630348146742256832507441006227495093504788493008578790129523222989419970
        );

        vk.IC[6] = Pairing.G1Point(
            12374871663298802651055030112493105834292492614917041861519625852907066061887,
            17957957268078704020117491575254290784548138922060012306086126830827580268213
        );

        vk.IC[7] = Pairing.G1Point(
            11256407884691996995619773139026582829292175700471096358800200391043478968151,
            6293617885921315613688804401528316052769355061077280968692354087659811652836
        );

        vk.IC[8] = Pairing.G1Point(
            7221635052364454688838487292599789157549853783569594055363270525875384105834,
            8057858213750640740554032393041134524358195426647711810113951400598081157014
        );

        vk.IC[9] = Pairing.G1Point(
            18399340622046800838764577281833797838002849093461572287225813275743234898150,
            13734115820472153896503539431963470677934175717360362502716178360186792093721
        );

        vk.IC[10] = Pairing.G1Point(
            3532740720483760617215527177517541996646162194695849795827932175874957754330,
            9502483364979892143907951548973529688550314462136241001142487279556289818503
        );

        vk.IC[11] = Pairing.G1Point(
            16745130152315345427073051073539007556512731258227075528572706397971750729374,
            16417012974731180681921787098307216702462393943570109776454300918853322082073
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
