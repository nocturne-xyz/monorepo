// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                534053835301040076659657426429509887971959623811860949208421204002282471055,
                12213739765778394863938385147018409763053761049521247546095472321436484526342
            ],
            [
                15434881831473100627459743808122655524575990728995176560532249266385219482225,
                1581058344175785993362763002563283638927239610142448669721960844879198954981
            ]
        );
        vk.IC = new Pairing.G1Point[](13);

        vk.IC[0] = Pairing.G1Point(
            19968769798602037974616313772915860096820943065263261703851139988506283906421,
            14183492704564958767802881292217514891792204968363768429189976239748575553986
        );
        vk.IC[1] = Pairing.G1Point(
            7639253869245647130334592724397909311505721245234710675959469480130770898291,
            10076179941701331342394306761203096697809011573251034279975880810812786348358
        );
        vk.IC[2] = Pairing.G1Point(
            3342580083045186717948686083657950021217637820185689593638346867187972074510,
            18024401114114205696253838456759365585387404412616230470997081702168328962333
        );
        vk.IC[3] = Pairing.G1Point(
            11445650056193324268647621219925279453222195476720129219900776452306119939209,
            14727075452541728778693096818344183544410746463086830997321453871828813867322
        );
        vk.IC[4] = Pairing.G1Point(
            2146644086139360413545839321195758129118874405093867291072562379664927411694,
            14879761953002226242530911318310303227992827387088933885549547856417907722178
        );
        vk.IC[5] = Pairing.G1Point(
            7497165080976206925579731776012294711545249056850362823355212380074842585396,
            14801065437841475226632640973826761661973558528195588558069935339220288688947
        );
        vk.IC[6] = Pairing.G1Point(
            8712271970045903932245094988514002354329338043620534033835720580854913700897,
            412233194920724713420144347842885580418503188084109252237806384030619406585
        );
        vk.IC[7] = Pairing.G1Point(
            3836327386190686904056826928478954669799535803029163569536982823328452376653,
            1247468808571570788334528949464037740354332239365495668284095415554522155028
        );
        vk.IC[8] = Pairing.G1Point(
            21367230767857380858092466848515804969010397308374047679912368460735238647421,
            14145839433312420752631374488444732840476732585913407683005351982680271302919
        );
        vk.IC[9] = Pairing.G1Point(
            20187259392523982874101656055474731363924093011274944037652915942973156189364,
            21045672740791381340821042832010418515719481212615690756756196320640952478417
        );
        vk.IC[10] = Pairing.G1Point(
            3308913081663777542708836107782683747351110421522657754041450197689231201208,
            17442230924663116839694182607198955068279681556161187169990017908715752053992
        );
        vk.IC[11] = Pairing.G1Point(
            12848094332565770711530558859664847467102767755107705213431449531770856700841,
            4869549457437522381910792267895153069914609297870212491961484215510165067484
        );
        vk.IC[12] = Pairing.G1Point(
            13505616399827890950205126090960097018264736775902627777422765675919194688422,
            7346494616787654824711309015804211081545341285579359774338809089849213816735
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
