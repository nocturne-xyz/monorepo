// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                7203956532654468517504251302073498490665504758778635353269345454746984894000,
                7789248730608845599230425560022701710954718243847834443029908182557678325138
            ],
            [
                21048449701982360969938455478516600085761833508568816262465839635688801428411,
                8761721738542320477482244003191372932725535834370570843090662444640044275527
            ]
        );
        vk.IC = new Pairing.G1Point[](13);

        vk.IC[0] = Pairing.G1Point(
            12306309883830352990305683102061792462755490629322619994331246410693957184411,
            14633603429464880602877941370952404314741024193217417683668882939567745751620
        );
        vk.IC[1] = Pairing.G1Point(
            637498001398426021918135359011962855391986703333843932894962096693776919202,
            1812015634696940283393601093550596589954106322441343849546353574887116759551
        );
        vk.IC[2] = Pairing.G1Point(
            14511403657789100541082601399812265257441218548432710087591878601136295990494,
            17826969493678407260773485930907270600869752221823168772355368926207777585231
        );
        vk.IC[3] = Pairing.G1Point(
            2390549452199612246451224671312604464569521662177238494296177950365752185846,
            19655855188120494002500050255326830703133162681183986369264602222048269541072
        );
        vk.IC[4] = Pairing.G1Point(
            3305529008762483631537932141980389759343145290809933809699618507840403391192,
            17543190568987543755081026089076466063640064378327742201191516492567909566560
        );
        vk.IC[5] = Pairing.G1Point(
            10480609364826692887015184395371193842767145461353677071391565887315445166499,
            5271429212342946426149401499215771446038218350591036639362692878900847527712
        );
        vk.IC[6] = Pairing.G1Point(
            6049547427645498353192139104907457328894705418158168389429798491171294661411,
            947575212430314304263664395003466062936109714927777758498681872330920899199
        );
        vk.IC[7] = Pairing.G1Point(
            18881098763620257990188839543254528421993266773408730320433457436459618001274,
            1467724198596908179139611848881668336816489091139717353382371778653694722183
        );
        vk.IC[8] = Pairing.G1Point(
            16938668616627564608833626912717184764600377993187710748258514391833239615112,
            11767514587774398588598872231028794287136306102123981539724234703404650108918
        );
        vk.IC[9] = Pairing.G1Point(
            15931789632027198696442151178459396122422094674866015385018367215112892799631,
            29885186887243059053571234921646298490472228800656737209758450934618275879
        );
        vk.IC[10] = Pairing.G1Point(
            13693908399693712406996786928183714485549469043648427889023899386458519908101,
            6239154669959546398404405154538420012540373234331433417095763124960640513810
        );
        vk.IC[11] = Pairing.G1Point(
            18868901501999004818034032395373654948927704782596391640338768961619823658737,
            19163376526675839649678377348004235458077448741110419874271522271124679792931
        );
        vk.IC[12] = Pairing.G1Point(
            19767175129475683768575620921943502767869580957572240340759318267696301062558,
            21020359834100455183064468451108539815171813550299971460355614108502730610674
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
