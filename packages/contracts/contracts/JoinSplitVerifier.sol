// SPDX-License-Identifier: MIT OR Apache-2.0
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                2870188271603800628365782044482931672960388700395347122942505166581822893607,
                3129362963877616232687045934308797957098757427004999940044197688066590646019
            ],
            [
                19550995150223895049062118025615369795802940280287638703575107230597408585395,
                9664507796109706319447203732383222956261998767659780732249438213092199681913
            ]
        );
        vk.IC = new Pairing.G1Point[](13);

        vk.IC[0] = Pairing.G1Point(
            13164391447665426268527621023040290983095705386460701141110686352115097416323,
            8324186651132482748904348731401627557892072809318898952757338977331764184447
        );
        vk.IC[1] = Pairing.G1Point(
            10823607627884965852695807114827245008120565999451104697814472517546793933057,
            13019101763056314113755127260489574748390892244483897835972204087806217105455
        );
        vk.IC[2] = Pairing.G1Point(
            14844658131259441972046004705771333769559606618711088196678139180210125849016,
            10044564365847003704029083493808678625734684982396059497698554738108789644435
        );
        vk.IC[3] = Pairing.G1Point(
            8117733301491735733488905265894010886397132853942615301234210945985019750172,
            11156112608438976330952326824802912374316273193137708058453489213799022031005
        );
        vk.IC[4] = Pairing.G1Point(
            11868446708285200806952762372374423024504269072538589148904706997014016093531,
            2466114479686147945650696289767715542547687997719431326506136157808837578976
        );
        vk.IC[5] = Pairing.G1Point(
            2233297451589771506643282307059039948863892145126905186525423539693205370778,
            9964913835437422365092586134314371066161697446520193222969545145584246849137
        );
        vk.IC[6] = Pairing.G1Point(
            11842072618902619654270653677850442068382091979741115552394238247488388549617,
            16886952175936118140761233234537962636902305922641287534028751442714232224541
        );
        vk.IC[7] = Pairing.G1Point(
            9164216223247592082672597474352923715512061762916973883211156676280746182635,
            17758106011717459114642129607351297864895038827677393536254471284086954788836
        );
        vk.IC[8] = Pairing.G1Point(
            12920028385061196228178493286587157851546581339998562680729363178692183487371,
            4081288320781388917508347176099965970703173470654390867069129569590916740909
        );
        vk.IC[9] = Pairing.G1Point(
            20992615134017373126638639515954732667021035420740000943297672432024152312937,
            14073696457431432802633003997746138840177701929995343658889280188431267711499
        );
        vk.IC[10] = Pairing.G1Point(
            973453547653238031050414147796609118429556934599895679653137565810551261628,
            3821497244325663103933961814955145306619602628109718375027015591501414565299
        );
        vk.IC[11] = Pairing.G1Point(
            10765227440230289042289718564326591345300971593709891722210203271716108865586,
            615875409244741495288017890948944897421296743559056509747709892959279971421
        );
        vk.IC[12] = Pairing.G1Point(
            18108676591107336417451517504407859889855423048529026814506388244283961283512,
            12250413008378505479392759270589010934685442181160316721476298878257531505528
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
