// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                14815045791779506702750929201464965302330182705390374895253075745075415210056,
                13038759509760562173482513522685542399864912620673544407839769710240552752018
            ],
            [
                19496977874765404633344042962183180143674182322962148315699494519009752813278,
                2995783271937765159357495856120759676637020377705246668736378901365561888425
            ]
        );
        vk.IC = new Pairing.G1Point[](12);

        vk.IC[0] = Pairing.G1Point(
            16001369955045268557472563657609009917059889626883329941090159878970258726463,
            12923208632636058480848137552830958974514155811734224930987736839893451059964
        );
        vk.IC[1] = Pairing.G1Point(
            14976727443274517543505567101917777030213860475837275048288911450327451140865,
            15242339934479661800625976551567317958625724239332462814548366929714617076987
        );
        vk.IC[2] = Pairing.G1Point(
            9498952795530372543160345919546970161182985870093340568163086124591413674633,
            8857824007957949949109227109854758354581712113805878221906547448876140091535
        );
        vk.IC[3] = Pairing.G1Point(
            10176320726404774192943422541176296216401079807853114295971222474844040572909,
            849572146914258304943850394992881643471848961977892212219234946298464107341
        );
        vk.IC[4] = Pairing.G1Point(
            9478827610238039929352800402250692100859320181313056734123192503509806506311,
            21666369422181431414461789797347012231018514432688103295029791190231961317510
        );
        vk.IC[5] = Pairing.G1Point(
            11620009128152397718890941472101449212719193518498640665963660051848227683597,
            8110580567758232512572476166603743837907571394752171571448928719563903063212
        );
        vk.IC[6] = Pairing.G1Point(
            12203952405876089288651054336066291708201056513892989547571392637472984483098,
            14521295961364240736698080917630434953119369495201296615145538633855684056355
        );
        vk.IC[7] = Pairing.G1Point(
            15126721000194285873014054318429799417251396455491696204004762222986553558081,
            1830196407846853640769490232152959501180573026792970981562878549296239449713
        );
        vk.IC[8] = Pairing.G1Point(
            14735509286085144796214552438841576646687719030995401571756721112804733965569,
            12094339747775328817570899017961667860193221010436181383187410795738615624514
        );
        vk.IC[9] = Pairing.G1Point(
            21787678147914144391245506254154150774414072003097241150952242557625750977528,
            9729529018847444319151802419958935110021319050675232682484061397500239503252
        );
        vk.IC[10] = Pairing.G1Point(
            15693214110401835804643119072951384204344713217332776527044789362899171983746,
            2015946943692225091785875942189605116206423496798809665579712162912465681306
        );
        vk.IC[11] = Pairing.G1Point(
            8276961817848171765512719597331510240318629126405277827500889241661150333511,
            20627202997029142468892321986176510111111551064315409262069937360402418753355
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
