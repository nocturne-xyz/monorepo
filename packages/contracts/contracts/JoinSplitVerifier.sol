// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {IJoinSplitVerifier} from "./interfaces/IJoinSplitVerifier.sol";

contract JoinSplitVerifier is IJoinSplitVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                6673345449316082093458218396030472116701179270623148755230481485057316539267,
                19912471171021122917912888688902604401037690432144757041690494222118489247057
            ],
            [
                16107386901867891224868473416819982298630225189659610451644459655300922495512,
                4384293207861003846674183732680953617182070828547623798791908810317969019752
            ]
        );
        vk.IC = new Pairing.G1Point[](14);

        vk.IC[0] = Pairing.G1Point(
            10810836161045739925983635282578584481027107404009197734229966751484870779714,
            13083559330710975975730225542782374164822040374933223865419892128666086067852
        );
        vk.IC[1] = Pairing.G1Point(
            704662970975316851802710903852976768629341156729055343075388342758080516338,
            15979075517794493960229947980824707295224758595617468807108026669218728071132
        );
        vk.IC[2] = Pairing.G1Point(
            17776785560675310784526039417929603698283657599810215104064952453648939644698,
            13172081441724020468992112846933748127671581700176819802420677121671331494975
        );
        vk.IC[3] = Pairing.G1Point(
            20045786939486707939804033201507028904015830171540568130259505918991063568195,
            12779318901375549235634319496332441365800815154876050496336101508581638281616
        );
        vk.IC[4] = Pairing.G1Point(
            10170862848771702603913836426299317819043513928841473478721822642913151982866,
            19885658765006663114212634617876507632531335684614150688316195898860904560090
        );
        vk.IC[5] = Pairing.G1Point(
            528655353519059553379866694384932314381155449526499334915271510518892939003,
            15031373154744405821654364677841515181217101019228516292557808144577498591107
        );
        vk.IC[6] = Pairing.G1Point(
            21565204477495735116103416623878357736578445726891722226882776344592941381091,
            12092105692529132880688731448945801545688499830716637362275780975657833699079
        );
        vk.IC[7] = Pairing.G1Point(
            5174979863018706527568196508586090874835080061745110998030440059147224668479,
            7897655690828971679131678600910328065829064384105308077078403209251088081100
        );
        vk.IC[8] = Pairing.G1Point(
            11944613399124922302844538752872691588045130412398833359628573535192972911210,
            14674673193131363505933721339150091563015490231591628451315916734084421427518
        );
        vk.IC[9] = Pairing.G1Point(
            12903008213536504828277362806203234457122784141038311545970601280025340643117,
            7433615463676316615622991850264342483171109478443990103385891318435110368307
        );
        vk.IC[10] = Pairing.G1Point(
            2821304538108039097604250827812362548517325565628846433194330846554786061477,
            12564834534558025100694081513579672823844059036301397681487494975016729864385
        );
        vk.IC[11] = Pairing.G1Point(
            13898007972763362327715299361999223264280190224219933864357369071665459262512,
            2094376130565018279919379451485863534108662574872403936158124994605973562231
        );
        vk.IC[12] = Pairing.G1Point(
            17473416843612044703103318546635499630194770853978866560315449076947700282336,
            9821673495344072526814138477770199448409574712750148279853164784866774526768
        );
        vk.IC[13] = Pairing.G1Point(
            12356148040554765267124598918494055422375166959410196636603805107628705905491,
            4155742938786108030351279452930762676627187580126911334175656881004020438198
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
