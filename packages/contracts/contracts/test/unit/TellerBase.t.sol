// SPDX-License-Identifier: MIT
pragma solidity ^0.8.2;
pragma abicoder v2;

import "forge-std/Test.sol";
import "forge-std/StdJson.sol";
import "forge-std/console.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import {ParseUtils} from "../utils/ParseUtils.sol";
import "../harnesses/TestTellerBase.sol";
import "../../libs/Types.sol";

contract TellerBaseTest is Test {
    TestTellerBase public tellerBase;

    function testOperationHashMatchesOffchainImpl() public {
        // NOTE: reference sdk/scripts/generateOperationHashTestCase.ts for inputs/expected outputs
        tellerBase = new TestTellerBase();
        tellerBase.initialize("NocturneTeller", "v1");

        uint256[8] memory dummyProof;
        JoinSplit[] memory joinSplits = new JoinSplit[](1);
        joinSplits[0] = JoinSplit({
            commitmentTreeRoot: 1,
            nullifierA: 1,
            nullifierB: 1,
            newNoteACommitment: 1,
            newNoteBCommitment: 1,
            senderCommitment: 1,
            encodedAsset: EncodedAsset({
                encodedAssetAddr: 1,
                encodedAssetId: 1
            }),
            proof: dummyProof,
            publicSpend: 1,
            newNoteAEncrypted: EncryptedNote({
                ciphertextBytes: bytes(""),
                encapsulatedSecretBytes: bytes("")
            }),
            newNoteBEncrypted: EncryptedNote({
                ciphertextBytes: bytes(""),
                encapsulatedSecretBytes: bytes("")
            })
        });

        Action[] memory actions = new Action[](1);
        actions[0] = Action({
            contractAddress: address(
                0x690B9A9E9aa1C9dB991C7721a92d351Db4FaC990
            ),
            encodedFunction: hex"1234"
        });

        EncodedAsset[] memory encodedRefundAssets = new EncodedAsset[](1);
        encodedRefundAssets[0] = EncodedAsset({
            encodedAssetAddr: 1,
            encodedAssetId: 1
        });

        Operation memory operation = Operation({
            joinSplits: joinSplits,
            refundAddr: CompressedStealthAddress({h1: 1, h2: 1}),
            encodedRefundAssets: encodedRefundAssets,
            actions: actions,
            encodedGasAsset: EncodedAsset({
                encodedAssetAddr: 1,
                encodedAssetId: 1
            }),
            gasAssetRefundThreshold: 1,
            executionGasLimit: 1,
            maxNumRefunds: 1,
            gasPrice: 1,
            chainId: 1,
            deadline: 1,
            atomicActions: true
        });

        bytes32 operationHash = tellerBase.hashOperation(operation);

        console.log("operationHash:");
        console.logBytes32(operationHash);
        console.log("");

        // Operation hash generated by running test case gen script in SDK
        assertEq(
            operationHash,
            bytes32(
                0x338864053efb99cb2befa1f91c4688c2cf9e8f4d808ee3acd8f407b9d2d52c9c
            )
        );

        vm.chainId(1);
        vm.etch(
            address(0x1111111111111111111111111111111111111111),
            address(tellerBase).code
        );
        vm.store(
            address(0x1111111111111111111111111111111111111111),
            bytes32(uint256(1)),
            keccak256(bytes("NocturneTeller"))
        );
        vm.store(
            address(0x1111111111111111111111111111111111111111),
            bytes32(uint256(2)),
            keccak256(bytes("v1"))
        );

        uint256 operationDigest = ITestTellerBase(
            address(0x1111111111111111111111111111111111111111)
        ).computeDigest(operation);

        console.log("operationDigest:");
        console.logBytes32(bytes32(operationDigest));
        console.log("");

        // Operation digest generated by running test case gen script in SDK
        assertEq(
            operationDigest,
            uint256(
                0x292e7aea136960f03c1bf7ed4f619575d37239fb3dbe12f878938dee8de9ae50
            )
        );
    }
}
