// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {ISubtreeUpdateVerifier} from "./interfaces/ISubtreeUpdateVerifier.sol";

contract SubtreeUpdateVerifier is ISubtreeUpdateVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                12821216991509256626148763875439169314767808897177036838587712926573177903129,
                17091067403442032491542780010254000402657118374623338265542627467499652167396
            ],
            [
                14674818318942810218546845299612061648925717289780427398764519581370619355658,
                7941566281877471282995192384117380546172383119183726921012690368127972553723
            ]
        );
        vk.IC = new Pairing.G1Point[](5);

        vk.IC[0] = Pairing.G1Point(
            12510853977170471266145936040079050789552944020970473809739806585799325762605,
            11915758998193431631334207222611834495483667183570163915125556368236205614516
        );
        vk.IC[1] = Pairing.G1Point(
            7731982575410388714584746429686474504878221480656364039184630344777623741410,
            10105243033893519232528285859526601258334362972865394097850134068069372503538
        );
        vk.IC[2] = Pairing.G1Point(
            7357780158476298173467882518507052968508835768404159766830106776863976384567,
            10084034431275621207696706431676491777536005260955582471281696365384459062793
        );
        vk.IC[3] = Pairing.G1Point(
            3378904791035310730291772500625091534148858013520416497759095808615884468818,
            11200279180504860759436136121936450003352812925848094310533381754207972372219
        );
        vk.IC[4] = Pairing.G1Point(
            13493104793259691851423643824999274788920554901338293626179565314961892609760,
            18620874801238109909556671856595600704446001285185360730192248483904228304634
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
