// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {ISubtreeUpdateVerifier} from "./interfaces/ISubtreeUpdateVerifier.sol";

contract SubtreeUpdateVerifier is ISubtreeUpdateVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                10683258294355032554134933168611063902439179876366352070709871068513418041141,
                12087872052732072651979624096102488890468058698540853999089869840084279380897
            ],
            [
                18018788916667297193312603619683948893678902295191478737560022288526480295942,
                18022044901756355166453582722515544454462457305225282133696472371599221341815
            ]
        );
        vk.IC = new Pairing.G1Point[](5);

        vk.IC[0] = Pairing.G1Point(
            6271520244464238597021348937353866586776003877102042790717590947425344528471,
            3687809704852952242952623861613295033880382987825872008484290163720286669727
        );

        vk.IC[1] = Pairing.G1Point(
            15156249011089469816051397461648438863092620294593186655361745933638264503129,
            6990432663095999187861539147417720876824290123234642842951301516097478775467
        );

        vk.IC[2] = Pairing.G1Point(
            14731636117019054187676738398942735162728129729672077945181788012795777290720,
            11162557372744886093361526307451050762105663504007324329059925863367627597639
        );

        vk.IC[3] = Pairing.G1Point(
            14902885661729522148997252169957764601283730023247184078185658427419043558717,
            17676120969698710390823289157303427006335272388291018843046018700672797202155
        );

        vk.IC[4] = Pairing.G1Point(
            9335107179857865295098732343762748454952293013429285580363656697486901884106,
            5645137571442280693911028380672682451159821736462035595588397062790194354281
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
