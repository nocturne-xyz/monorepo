// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import {Pairing} from "./libs/Pairing.sol";
import {Groth16} from "./libs/Groth16.sol";
import {ISubtreeUpdateVerifier} from "./interfaces/ISubtreeUpdateVerifier.sol";

contract SubtreeUpdateVerifier is ISubtreeUpdateVerifier {
    function verifyingKey()
        internal
        pure
        returns (Groth16.VerifyingKey memory vk)
    {
        vk.alpha1 = Pairing.G1Point(
            20491192805390485299153009773594534940189261866228447918068658471970481763042,
            9383485363053290200918347156157836566562967994039712273449902621266178545958
        );

        vk.beta2 = Pairing.G2Point(
            [
                4252822878758300859123897981450591353533073413197771768651442665752259397132,
                6375614351688725206403948262868962793625744043794305715222011528459656738731
            ],
            [
                21847035105528745403288232691147584728191162732299865338377159692350059136679,
                10505242626370262277552901082094356697409835680220590971873171140371331206856
            ]
        );
        vk.gamma2 = Pairing.G2Point(
            [
                11559732032986387107991004021392285783925812861821192530917403151452391805634,
                10857046999023057135944570762232829481370756359578518086990519993285655852781
            ],
            [
                4082367875863433681332203403145435568316851327593401208105741076214120093531,
                8495653923123431417604973247489272438418190587263600148770280649306958101930
            ]
        );
        vk.delta2 = Pairing.G2Point(
            [
                6404721675989611642202614104936105098890445924492942257758146670068428951879,
                21812054073548068182410796426142495095716183022768085990809488135355577671276
            ],
            [
                5344982087611665170606693871618930163760277492707532957750140267181294340064,
                7618005786265969536222907671392993840418417105554154004619915446765233381562
            ]
        );
        vk.IC = new Pairing.G1Point[](5);

        vk.IC[0] = Pairing.G1Point(
            21514231411514394842579330813465424996376366693395045080331018331029930084028,
            16504980779808873781516416105260953256653745387953912798116432349858538570333
        );

        vk.IC[1] = Pairing.G1Point(
            556679158384422079612527259087652312224872517659668102226110658527996475253,
            216502277631221557749453233671870580428165427128666808833579209898891872776
        );

        vk.IC[2] = Pairing.G1Point(
            17547009323069694679631525459483808941832327940175085711374813793612120112363,
            15370373937485610644980497735550509198725727528297147751408318713913428766002
        );

        vk.IC[3] = Pairing.G1Point(
            7473521373687098834516712978160558933828295493455524126268377790653318454973,
            12626735001421565543137416896765278267704666187640930835634942202726200188794
        );

        vk.IC[4] = Pairing.G1Point(
            14223322896084577797279066991611479896112799698191826599707983246474198258993,
            20403012879116897192977802319700576283308800865929786191008541310087993821362
        );
    }

    /// @return r  bool true if proof is valid
    function verifyProof(
        uint256[8] memory proof,
        uint256[] memory pi
    ) public view override returns (bool r) {
        return Groth16.verifyProof(verifyingKey(), proof, pi);
    }

    /// @return r bool true if proofs are valid
    function batchVerifyProofs(
        uint256[8][] memory proofs,
        uint256[][] memory allPis
    ) public view override returns (bool) {
        return Groth16.batchVerifyProofs(verifyingKey(), proofs, allPis);
    }
}
