// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class InsertNoteCommitments extends ethereum.Event {
  get params(): InsertNoteCommitments__Params {
    return new InsertNoteCommitments__Params(this);
  }
}

export class InsertNoteCommitments__Params {
  _event: InsertNoteCommitments;

  constructor(event: InsertNoteCommitments) {
    this._event = event;
  }

  get commitments(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }
}

export class InsertNotes extends ethereum.Event {
  get params(): InsertNotes__Params {
    return new InsertNotes__Params(this);
  }
}

export class InsertNotes__Params {
  _event: InsertNotes;

  constructor(event: InsertNotes) {
    this._event = event;
  }

  get notes(): Array<InsertNotesNotesStruct> {
    return this._event.parameters[0].value.toTupleArray<
      InsertNotesNotesStruct
    >();
  }
}

export class InsertNotesNotesStruct extends ethereum.Tuple {
  get ownerH1(): BigInt {
    return this[0].toBigInt();
  }

  get ownerH2(): BigInt {
    return this[1].toBigInt();
  }

  get nonce(): BigInt {
    return this[2].toBigInt();
  }

  get encodedAssetAddr(): BigInt {
    return this[3].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[4].toBigInt();
  }

  get value(): BigInt {
    return this[5].toBigInt();
  }
}

export class JoinSplit extends ethereum.Event {
  get params(): JoinSplit__Params {
    return new JoinSplit__Params(this);
  }
}

export class JoinSplit__Params {
  _event: JoinSplit;

  constructor(event: JoinSplit) {
    this._event = event;
  }

  get oldNoteANullifier(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldNoteBNullifier(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newNoteAIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newNoteBIndex(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get joinSplitTx(): JoinSplitJoinSplitTxStruct {
    return changetype<JoinSplitJoinSplitTxStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class JoinSplitJoinSplitTxStruct extends ethereum.Tuple {
  get commitmentTreeRoot(): BigInt {
    return this[0].toBigInt();
  }

  get nullifierA(): BigInt {
    return this[1].toBigInt();
  }

  get nullifierB(): BigInt {
    return this[2].toBigInt();
  }

  get newNoteACommitment(): BigInt {
    return this[3].toBigInt();
  }

  get newNoteBCommitment(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get encodedAsset(): JoinSplitJoinSplitTxEncodedAssetStruct {
    return changetype<JoinSplitJoinSplitTxEncodedAssetStruct>(
      this[6].toTuple()
    );
  }

  get publicSpend(): BigInt {
    return this[7].toBigInt();
  }

  get newNoteATransmission(): JoinSplitJoinSplitTxNewNoteATransmissionStruct {
    return changetype<JoinSplitJoinSplitTxNewNoteATransmissionStruct>(
      this[8].toTuple()
    );
  }

  get newNoteBTransmission(): JoinSplitJoinSplitTxNewNoteBTransmissionStruct {
    return changetype<JoinSplitJoinSplitTxNewNoteBTransmissionStruct>(
      this[9].toTuple()
    );
  }
}

export class JoinSplitJoinSplitTxEncodedAssetStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class JoinSplitJoinSplitTxNewNoteATransmissionStruct extends ethereum.Tuple {
  get owner(): JoinSplitJoinSplitTxNewNoteATransmissionOwnerStruct {
    return changetype<JoinSplitJoinSplitTxNewNoteATransmissionOwnerStruct>(
      this[0].toTuple()
    );
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class JoinSplitJoinSplitTxNewNoteATransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class JoinSplitJoinSplitTxNewNoteBTransmissionStruct extends ethereum.Tuple {
  get owner(): JoinSplitJoinSplitTxNewNoteBTransmissionOwnerStruct {
    return changetype<JoinSplitJoinSplitTxNewNoteBTransmissionOwnerStruct>(
      this[0].toTuple()
    );
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class JoinSplitJoinSplitTxNewNoteBTransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class OperationProcessed extends ethereum.Event {
  get params(): OperationProcessed__Params {
    return new OperationProcessed__Params(this);
  }
}

export class OperationProcessed__Params {
  _event: OperationProcessed;

  constructor(event: OperationProcessed) {
    this._event = event;
  }

  get operationDigest(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get opProcessed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get failureReason(): string {
    return this._event.parameters[2].value.toString();
  }

  get callSuccesses(): Array<boolean> {
    return this._event.parameters[3].value.toBooleanArray();
  }

  get callResults(): Array<Bytes> {
    return this._event.parameters[4].value.toBytesArray();
  }
}

export class Refund extends ethereum.Event {
  get params(): Refund__Params {
    return new Refund__Params(this);
  }
}

export class Refund__Params {
  _event: Refund;

  constructor(event: Refund) {
    this._event = event;
  }

  get refundAddr(): RefundRefundAddrStruct {
    return changetype<RefundRefundAddrStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get nonce(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get encodedAssetAddr(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get merkleIndex(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RefundRefundAddrStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class SubtreeUpdate extends ethereum.Event {
  get params(): SubtreeUpdate__Params {
    return new SubtreeUpdate__Params(this);
  }
}

export class SubtreeUpdate__Params {
  _event: SubtreeUpdate;

  constructor(event: SubtreeUpdate) {
    this._event = event;
  }

  get newRoot(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get subtreeIndex(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Wallet___receivedAssetsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getEncodedAssetAddr(): BigInt {
    return this.value0;
  }

  getEncodedAssetId(): BigInt {
    return this.value1;
  }
}

export class Wallet__executeOperationResultOpResultStruct extends ethereum.Tuple {
  get opProcessed(): boolean {
    return this[0].toBoolean();
  }

  get failureReason(): string {
    return this[1].toString();
  }

  get callSuccesses(): Array<boolean> {
    return this[2].toBooleanArray();
  }

  get callResults(): Array<Bytes> {
    return this[3].toBytesArray();
  }

  get verificationGas(): BigInt {
    return this[4].toBigInt();
  }

  get executionGas(): BigInt {
    return this[5].toBigInt();
  }

  get numRefunds(): BigInt {
    return this[6].toBigInt();
  }
}

export class Wallet__executeOperationInputOpStruct extends ethereum.Tuple {
  get joinSplitTxs(): Array<Wallet__executeOperationInputOpJoinSplitTxsStruct> {
    return this[0].toTupleArray<
      Wallet__executeOperationInputOpJoinSplitTxsStruct
    >();
  }

  get refundAddr(): Wallet__executeOperationInputOpRefundAddrStruct {
    return changetype<Wallet__executeOperationInputOpRefundAddrStruct>(
      this[1].toTuple()
    );
  }

  get encodedRefundAssets(): Array<
    Wallet__executeOperationInputOpEncodedRefundAssetsStruct
  > {
    return this[2].toTupleArray<
      Wallet__executeOperationInputOpEncodedRefundAssetsStruct
    >();
  }

  get actions(): Array<Wallet__executeOperationInputOpActionsStruct> {
    return this[3].toTupleArray<Wallet__executeOperationInputOpActionsStruct>();
  }

  get verificationGasLimit(): BigInt {
    return this[4].toBigInt();
  }

  get executionGasLimit(): BigInt {
    return this[5].toBigInt();
  }

  get maxNumRefunds(): BigInt {
    return this[6].toBigInt();
  }

  get gasPrice(): BigInt {
    return this[7].toBigInt();
  }
}

export class Wallet__executeOperationInputOpJoinSplitTxsStruct extends ethereum.Tuple {
  get commitmentTreeRoot(): BigInt {
    return this[0].toBigInt();
  }

  get nullifierA(): BigInt {
    return this[1].toBigInt();
  }

  get nullifierB(): BigInt {
    return this[2].toBigInt();
  }

  get newNoteACommitment(): BigInt {
    return this[3].toBigInt();
  }

  get newNoteBCommitment(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get encodedAsset(): Wallet__executeOperationInputOpJoinSplitTxsEncodedAssetStruct {
    return changetype<
      Wallet__executeOperationInputOpJoinSplitTxsEncodedAssetStruct
    >(this[6].toTuple());
  }

  get publicSpend(): BigInt {
    return this[7].toBigInt();
  }

  get newNoteATransmission(): Wallet__executeOperationInputOpJoinSplitTxsNewNoteATransmissionStruct {
    return changetype<
      Wallet__executeOperationInputOpJoinSplitTxsNewNoteATransmissionStruct
    >(this[8].toTuple());
  }

  get newNoteBTransmission(): Wallet__executeOperationInputOpJoinSplitTxsNewNoteBTransmissionStruct {
    return changetype<
      Wallet__executeOperationInputOpJoinSplitTxsNewNoteBTransmissionStruct
    >(this[9].toTuple());
  }
}

export class Wallet__executeOperationInputOpJoinSplitTxsEncodedAssetStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Wallet__executeOperationInputOpJoinSplitTxsNewNoteATransmissionStruct extends ethereum.Tuple {
  get owner(): Wallet__executeOperationInputOpJoinSplitTxsNewNoteATransmissionOwnerStruct {
    return changetype<
      Wallet__executeOperationInputOpJoinSplitTxsNewNoteATransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__executeOperationInputOpJoinSplitTxsNewNoteATransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__executeOperationInputOpJoinSplitTxsNewNoteBTransmissionStruct extends ethereum.Tuple {
  get owner(): Wallet__executeOperationInputOpJoinSplitTxsNewNoteBTransmissionOwnerStruct {
    return changetype<
      Wallet__executeOperationInputOpJoinSplitTxsNewNoteBTransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__executeOperationInputOpJoinSplitTxsNewNoteBTransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__executeOperationInputOpRefundAddrStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__executeOperationInputOpEncodedRefundAssetsStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Wallet__executeOperationInputOpActionsStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get encodedFunction(): Bytes {
    return this[1].toBytes();
  }
}

export class Wallet__processBundleResultValue0Struct extends ethereum.Tuple {
  get opProcessed(): boolean {
    return this[0].toBoolean();
  }

  get failureReason(): string {
    return this[1].toString();
  }

  get callSuccesses(): Array<boolean> {
    return this[2].toBooleanArray();
  }

  get callResults(): Array<Bytes> {
    return this[3].toBytesArray();
  }

  get verificationGas(): BigInt {
    return this[4].toBigInt();
  }

  get executionGas(): BigInt {
    return this[5].toBigInt();
  }

  get numRefunds(): BigInt {
    return this[6].toBigInt();
  }
}

export class Wallet__processBundleInputBundleStruct extends ethereum.Tuple {
  get operations(): Array<Wallet__processBundleInputBundleOperationsStruct> {
    return this[0].toTupleArray<
      Wallet__processBundleInputBundleOperationsStruct
    >();
  }
}

export class Wallet__processBundleInputBundleOperationsStruct extends ethereum.Tuple {
  get joinSplitTxs(): Array<
    Wallet__processBundleInputBundleOperationsJoinSplitTxsStruct
  > {
    return this[0].toTupleArray<
      Wallet__processBundleInputBundleOperationsJoinSplitTxsStruct
    >();
  }

  get refundAddr(): Wallet__processBundleInputBundleOperationsRefundAddrStruct {
    return changetype<
      Wallet__processBundleInputBundleOperationsRefundAddrStruct
    >(this[1].toTuple());
  }

  get encodedRefundAssets(): Array<
    Wallet__processBundleInputBundleOperationsEncodedRefundAssetsStruct
  > {
    return this[2].toTupleArray<
      Wallet__processBundleInputBundleOperationsEncodedRefundAssetsStruct
    >();
  }

  get actions(): Array<
    Wallet__processBundleInputBundleOperationsActionsStruct
  > {
    return this[3].toTupleArray<
      Wallet__processBundleInputBundleOperationsActionsStruct
    >();
  }

  get verificationGasLimit(): BigInt {
    return this[4].toBigInt();
  }

  get executionGasLimit(): BigInt {
    return this[5].toBigInt();
  }

  get maxNumRefunds(): BigInt {
    return this[6].toBigInt();
  }

  get gasPrice(): BigInt {
    return this[7].toBigInt();
  }
}

export class Wallet__processBundleInputBundleOperationsJoinSplitTxsStruct extends ethereum.Tuple {
  get commitmentTreeRoot(): BigInt {
    return this[0].toBigInt();
  }

  get nullifierA(): BigInt {
    return this[1].toBigInt();
  }

  get nullifierB(): BigInt {
    return this[2].toBigInt();
  }

  get newNoteACommitment(): BigInt {
    return this[3].toBigInt();
  }

  get newNoteBCommitment(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get encodedAsset(): Wallet__processBundleInputBundleOperationsJoinSplitTxsEncodedAssetStruct {
    return changetype<
      Wallet__processBundleInputBundleOperationsJoinSplitTxsEncodedAssetStruct
    >(this[6].toTuple());
  }

  get publicSpend(): BigInt {
    return this[7].toBigInt();
  }

  get newNoteATransmission(): Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteATransmissionStruct {
    return changetype<
      Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteATransmissionStruct
    >(this[8].toTuple());
  }

  get newNoteBTransmission(): Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteBTransmissionStruct {
    return changetype<
      Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteBTransmissionStruct
    >(this[9].toTuple());
  }
}

export class Wallet__processBundleInputBundleOperationsJoinSplitTxsEncodedAssetStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteATransmissionStruct extends ethereum.Tuple {
  get owner(): Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteATransmissionOwnerStruct {
    return changetype<
      Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteATransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteATransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteBTransmissionStruct extends ethereum.Tuple {
  get owner(): Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteBTransmissionOwnerStruct {
    return changetype<
      Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteBTransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__processBundleInputBundleOperationsJoinSplitTxsNewNoteBTransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__processBundleInputBundleOperationsRefundAddrStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__processBundleInputBundleOperationsEncodedRefundAssetsStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Wallet__processBundleInputBundleOperationsActionsStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get encodedFunction(): Bytes {
    return this[1].toBytes();
  }
}

export class Wallet__processOperationResultOpResultStruct extends ethereum.Tuple {
  get opProcessed(): boolean {
    return this[0].toBoolean();
  }

  get failureReason(): string {
    return this[1].toString();
  }

  get callSuccesses(): Array<boolean> {
    return this[2].toBooleanArray();
  }

  get callResults(): Array<Bytes> {
    return this[3].toBytesArray();
  }

  get verificationGas(): BigInt {
    return this[4].toBigInt();
  }

  get executionGas(): BigInt {
    return this[5].toBigInt();
  }

  get numRefunds(): BigInt {
    return this[6].toBigInt();
  }
}

export class Wallet__processOperationInputOpStruct extends ethereum.Tuple {
  get joinSplitTxs(): Array<Wallet__processOperationInputOpJoinSplitTxsStruct> {
    return this[0].toTupleArray<
      Wallet__processOperationInputOpJoinSplitTxsStruct
    >();
  }

  get refundAddr(): Wallet__processOperationInputOpRefundAddrStruct {
    return changetype<Wallet__processOperationInputOpRefundAddrStruct>(
      this[1].toTuple()
    );
  }

  get encodedRefundAssets(): Array<
    Wallet__processOperationInputOpEncodedRefundAssetsStruct
  > {
    return this[2].toTupleArray<
      Wallet__processOperationInputOpEncodedRefundAssetsStruct
    >();
  }

  get actions(): Array<Wallet__processOperationInputOpActionsStruct> {
    return this[3].toTupleArray<Wallet__processOperationInputOpActionsStruct>();
  }

  get verificationGasLimit(): BigInt {
    return this[4].toBigInt();
  }

  get executionGasLimit(): BigInt {
    return this[5].toBigInt();
  }

  get maxNumRefunds(): BigInt {
    return this[6].toBigInt();
  }

  get gasPrice(): BigInt {
    return this[7].toBigInt();
  }
}

export class Wallet__processOperationInputOpJoinSplitTxsStruct extends ethereum.Tuple {
  get commitmentTreeRoot(): BigInt {
    return this[0].toBigInt();
  }

  get nullifierA(): BigInt {
    return this[1].toBigInt();
  }

  get nullifierB(): BigInt {
    return this[2].toBigInt();
  }

  get newNoteACommitment(): BigInt {
    return this[3].toBigInt();
  }

  get newNoteBCommitment(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get encodedAsset(): Wallet__processOperationInputOpJoinSplitTxsEncodedAssetStruct {
    return changetype<
      Wallet__processOperationInputOpJoinSplitTxsEncodedAssetStruct
    >(this[6].toTuple());
  }

  get publicSpend(): BigInt {
    return this[7].toBigInt();
  }

  get newNoteATransmission(): Wallet__processOperationInputOpJoinSplitTxsNewNoteATransmissionStruct {
    return changetype<
      Wallet__processOperationInputOpJoinSplitTxsNewNoteATransmissionStruct
    >(this[8].toTuple());
  }

  get newNoteBTransmission(): Wallet__processOperationInputOpJoinSplitTxsNewNoteBTransmissionStruct {
    return changetype<
      Wallet__processOperationInputOpJoinSplitTxsNewNoteBTransmissionStruct
    >(this[9].toTuple());
  }
}

export class Wallet__processOperationInputOpJoinSplitTxsEncodedAssetStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Wallet__processOperationInputOpJoinSplitTxsNewNoteATransmissionStruct extends ethereum.Tuple {
  get owner(): Wallet__processOperationInputOpJoinSplitTxsNewNoteATransmissionOwnerStruct {
    return changetype<
      Wallet__processOperationInputOpJoinSplitTxsNewNoteATransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__processOperationInputOpJoinSplitTxsNewNoteATransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__processOperationInputOpJoinSplitTxsNewNoteBTransmissionStruct extends ethereum.Tuple {
  get owner(): Wallet__processOperationInputOpJoinSplitTxsNewNoteBTransmissionOwnerStruct {
    return changetype<
      Wallet__processOperationInputOpJoinSplitTxsNewNoteBTransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__processOperationInputOpJoinSplitTxsNewNoteBTransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__processOperationInputOpRefundAddrStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class Wallet__processOperationInputOpEncodedRefundAssetsStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class Wallet__processOperationInputOpActionsStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get encodedFunction(): Bytes {
    return this[1].toBytes();
  }
}

export class Wallet extends ethereum.SmartContract {
  static bind(address: Address): Wallet {
    return new Wallet("Wallet", address);
  }

  ENTERED_EXECUTE_OPERATION(): BigInt {
    let result = super.call(
      "ENTERED_EXECUTE_OPERATION",
      "ENTERED_EXECUTE_OPERATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ENTERED_EXECUTE_OPERATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ENTERED_EXECUTE_OPERATION",
      "ENTERED_EXECUTE_OPERATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ENTERED_PROCESS_OPERATION(): BigInt {
    let result = super.call(
      "ENTERED_PROCESS_OPERATION",
      "ENTERED_PROCESS_OPERATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ENTERED_PROCESS_OPERATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ENTERED_PROCESS_OPERATION",
      "ENTERED_PROCESS_OPERATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  NOT_ENTERED(): BigInt {
    let result = super.call("NOT_ENTERED", "NOT_ENTERED():(uint256)", []);

    return result[0].toBigInt();
  }

  try_NOT_ENTERED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("NOT_ENTERED", "NOT_ENTERED():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VERSION(): i32 {
    let result = super.call("VERSION", "VERSION():(uint8)", []);

    return result[0].toI32();
  }

  try_VERSION(): ethereum.CallResult<i32> {
    let result = super.tryCall("VERSION", "VERSION():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  _joinSplitVerifier(): Address {
    let result = super.call(
      "_joinSplitVerifier",
      "_joinSplitVerifier():(address)",
      []
    );

    return result[0].toAddress();
  }

  try__joinSplitVerifier(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_joinSplitVerifier",
      "_joinSplitVerifier():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _nullifierSet(param0: BigInt): boolean {
    let result = super.call("_nullifierSet", "_nullifierSet(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try__nullifierSet(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_nullifierSet",
      "_nullifierSet(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _pastRoots(param0: BigInt): boolean {
    let result = super.call("_pastRoots", "_pastRoots(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try__pastRoots(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("_pastRoots", "_pastRoots(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _receivedAssets(param0: BigInt): Wallet___receivedAssetsResult {
    let result = super.call(
      "_receivedAssets",
      "_receivedAssets(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Wallet___receivedAssetsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try__receivedAssets(
    param0: BigInt
  ): ethereum.CallResult<Wallet___receivedAssetsResult> {
    let result = super.tryCall(
      "_receivedAssets",
      "_receivedAssets(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Wallet___receivedAssetsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  _vault(): Address {
    let result = super.call("_vault", "_vault():(address)", []);

    return result[0].toAddress();
  }

  try__vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("_vault", "_vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  count(): BigInt {
    let result = super.call("count", "count():(uint256)", []);

    return result[0].toBigInt();
  }

  try_count(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("count", "count():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executeOperation(
    op: Wallet__executeOperationInputOpStruct
  ): Wallet__executeOperationResultOpResultStruct {
    let result = super.call(
      "executeOperation",
      "executeOperation(((uint256,uint256,uint256,uint256,uint256,uint256[8],(uint256,uint256),uint256,((uint256,uint256,uint256,uint256),uint256,uint256,uint256),((uint256,uint256,uint256,uint256),uint256,uint256,uint256))[],(uint256,uint256,uint256,uint256),(uint256,uint256)[],(address,bytes)[],uint256,uint256,uint256,uint256)):((bool,string,bool[],bytes[],uint256,uint256,uint256))",
      [ethereum.Value.fromTuple(op)]
    );

    return changetype<Wallet__executeOperationResultOpResultStruct>(
      result[0].toTuple()
    );
  }

  try_executeOperation(
    op: Wallet__executeOperationInputOpStruct
  ): ethereum.CallResult<Wallet__executeOperationResultOpResultStruct> {
    let result = super.tryCall(
      "executeOperation",
      "executeOperation(((uint256,uint256,uint256,uint256,uint256,uint256[8],(uint256,uint256),uint256,((uint256,uint256,uint256,uint256),uint256,uint256,uint256),((uint256,uint256,uint256,uint256),uint256,uint256,uint256))[],(uint256,uint256,uint256,uint256),(uint256,uint256)[],(address,bytes)[],uint256,uint256,uint256,uint256)):((bool,string,bool[],bytes[],uint256,uint256,uint256))",
      [ethereum.Value.fromTuple(op)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Wallet__executeOperationResultOpResultStruct>(
        value[0].toTuple()
      )
    );
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    ids: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    ids: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    id: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    id: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    id: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    id: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  processBundle(
    bundle: Wallet__processBundleInputBundleStruct
  ): Array<Wallet__processBundleResultValue0Struct> {
    let result = super.call(
      "processBundle",
      "processBundle((((uint256,uint256,uint256,uint256,uint256,uint256[8],(uint256,uint256),uint256,((uint256,uint256,uint256,uint256),uint256,uint256,uint256),((uint256,uint256,uint256,uint256),uint256,uint256,uint256))[],(uint256,uint256,uint256,uint256),(uint256,uint256)[],(address,bytes)[],uint256,uint256,uint256,uint256)[])):((bool,string,bool[],bytes[],uint256,uint256,uint256)[])",
      [ethereum.Value.fromTuple(bundle)]
    );

    return result[0].toTupleArray<Wallet__processBundleResultValue0Struct>();
  }

  try_processBundle(
    bundle: Wallet__processBundleInputBundleStruct
  ): ethereum.CallResult<Array<Wallet__processBundleResultValue0Struct>> {
    let result = super.tryCall(
      "processBundle",
      "processBundle((((uint256,uint256,uint256,uint256,uint256,uint256[8],(uint256,uint256),uint256,((uint256,uint256,uint256,uint256),uint256,uint256,uint256),((uint256,uint256,uint256,uint256),uint256,uint256,uint256))[],(uint256,uint256,uint256,uint256),(uint256,uint256)[],(address,bytes)[],uint256,uint256,uint256,uint256)[])):((bool,string,bool[],bytes[],uint256,uint256,uint256)[])",
      [ethereum.Value.fromTuple(bundle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Wallet__processBundleResultValue0Struct>()
    );
  }

  processOperation(
    op: Wallet__processOperationInputOpStruct,
    verificationGasForOp: BigInt,
    bundler: Address
  ): Wallet__processOperationResultOpResultStruct {
    let result = super.call(
      "processOperation",
      "processOperation(((uint256,uint256,uint256,uint256,uint256,uint256[8],(uint256,uint256),uint256,((uint256,uint256,uint256,uint256),uint256,uint256,uint256),((uint256,uint256,uint256,uint256),uint256,uint256,uint256))[],(uint256,uint256,uint256,uint256),(uint256,uint256)[],(address,bytes)[],uint256,uint256,uint256,uint256),uint256,address):((bool,string,bool[],bytes[],uint256,uint256,uint256))",
      [
        ethereum.Value.fromTuple(op),
        ethereum.Value.fromUnsignedBigInt(verificationGasForOp),
        ethereum.Value.fromAddress(bundler)
      ]
    );

    return changetype<Wallet__processOperationResultOpResultStruct>(
      result[0].toTuple()
    );
  }

  try_processOperation(
    op: Wallet__processOperationInputOpStruct,
    verificationGasForOp: BigInt,
    bundler: Address
  ): ethereum.CallResult<Wallet__processOperationResultOpResultStruct> {
    let result = super.tryCall(
      "processOperation",
      "processOperation(((uint256,uint256,uint256,uint256,uint256,uint256[8],(uint256,uint256),uint256,((uint256,uint256,uint256,uint256),uint256,uint256,uint256),((uint256,uint256,uint256,uint256),uint256,uint256,uint256))[],(uint256,uint256,uint256,uint256),(uint256,uint256)[],(address,bytes)[],uint256,uint256,uint256,uint256),uint256,address):((bool,string,bool[],bytes[],uint256,uint256,uint256))",
      [
        ethereum.Value.fromTuple(op),
        ethereum.Value.fromUnsignedBigInt(verificationGasForOp),
        ethereum.Value.fromAddress(bundler)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Wallet__processOperationResultOpResultStruct>(
        value[0].toTuple()
      )
    );
  }

  reentrancyGuardStage(): BigInt {
    let result = super.call(
      "reentrancyGuardStage",
      "reentrancyGuardStage():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_reentrancyGuardStage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reentrancyGuardStage",
      "reentrancyGuardStage():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  root(): BigInt {
    let result = super.call("root", "root():(uint256)", []);

    return result[0].toBigInt();
  }

  try_root(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("root", "root():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalCount(): BigInt {
    let result = super.call("totalCount", "totalCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalCount", "totalCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class __BalanceManager__initCall extends ethereum.Call {
  get inputs(): __BalanceManager__initCall__Inputs {
    return new __BalanceManager__initCall__Inputs(this);
  }

  get outputs(): __BalanceManager__initCall__Outputs {
    return new __BalanceManager__initCall__Outputs(this);
  }
}

export class __BalanceManager__initCall__Inputs {
  _call: __BalanceManager__initCall;

  constructor(call: __BalanceManager__initCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get joinSplitVerifier(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get subtreeUpdateVerifier(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class __BalanceManager__initCall__Outputs {
  _call: __BalanceManager__initCall;

  constructor(call: __BalanceManager__initCall) {
    this._call = call;
  }
}

export class __CommitmentTreeManager_initCall extends ethereum.Call {
  get inputs(): __CommitmentTreeManager_initCall__Inputs {
    return new __CommitmentTreeManager_initCall__Inputs(this);
  }

  get outputs(): __CommitmentTreeManager_initCall__Outputs {
    return new __CommitmentTreeManager_initCall__Outputs(this);
  }
}

export class __CommitmentTreeManager_initCall__Inputs {
  _call: __CommitmentTreeManager_initCall;

  constructor(call: __CommitmentTreeManager_initCall) {
    this._call = call;
  }

  get joinSplitVerifier(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtreeUpdateVerifier(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class __CommitmentTreeManager_initCall__Outputs {
  _call: __CommitmentTreeManager_initCall;

  constructor(call: __CommitmentTreeManager_initCall) {
    this._call = call;
  }
}

export class ApplySubtreeUpdateCall extends ethereum.Call {
  get inputs(): ApplySubtreeUpdateCall__Inputs {
    return new ApplySubtreeUpdateCall__Inputs(this);
  }

  get outputs(): ApplySubtreeUpdateCall__Outputs {
    return new ApplySubtreeUpdateCall__Outputs(this);
  }
}

export class ApplySubtreeUpdateCall__Inputs {
  _call: ApplySubtreeUpdateCall;

  constructor(call: ApplySubtreeUpdateCall) {
    this._call = call;
  }

  get newRoot(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ApplySubtreeUpdateCall__Outputs {
  _call: ApplySubtreeUpdateCall;

  constructor(call: ApplySubtreeUpdateCall) {
    this._call = call;
  }
}

export class DepositFundsCall extends ethereum.Call {
  get inputs(): DepositFundsCall__Inputs {
    return new DepositFundsCall__Inputs(this);
  }

  get outputs(): DepositFundsCall__Outputs {
    return new DepositFundsCall__Outputs(this);
  }
}

export class DepositFundsCall__Inputs {
  _call: DepositFundsCall;

  constructor(call: DepositFundsCall) {
    this._call = call;
  }

  get deposit(): DepositFundsCallDepositStruct {
    return changetype<DepositFundsCallDepositStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DepositFundsCall__Outputs {
  _call: DepositFundsCall;

  constructor(call: DepositFundsCall) {
    this._call = call;
  }
}

export class DepositFundsCallDepositStruct extends ethereum.Tuple {
  get spender(): Address {
    return this[0].toAddress();
  }

  get encodedAssetAddr(): BigInt {
    return this[1].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[2].toBigInt();
  }

  get value(): BigInt {
    return this[3].toBigInt();
  }

  get depositAddr(): DepositFundsCallDepositDepositAddrStruct {
    return changetype<DepositFundsCallDepositDepositAddrStruct>(
      this[4].toTuple()
    );
  }
}

export class DepositFundsCallDepositDepositAddrStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExecuteOperationCall extends ethereum.Call {
  get inputs(): ExecuteOperationCall__Inputs {
    return new ExecuteOperationCall__Inputs(this);
  }

  get outputs(): ExecuteOperationCall__Outputs {
    return new ExecuteOperationCall__Outputs(this);
  }
}

export class ExecuteOperationCall__Inputs {
  _call: ExecuteOperationCall;

  constructor(call: ExecuteOperationCall) {
    this._call = call;
  }

  get op(): ExecuteOperationCallOpStruct {
    return changetype<ExecuteOperationCallOpStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ExecuteOperationCall__Outputs {
  _call: ExecuteOperationCall;

  constructor(call: ExecuteOperationCall) {
    this._call = call;
  }

  get opResult(): ExecuteOperationCallOpResultStruct {
    return changetype<ExecuteOperationCallOpResultStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class ExecuteOperationCallOpStruct extends ethereum.Tuple {
  get joinSplitTxs(): Array<ExecuteOperationCallOpJoinSplitTxsStruct> {
    return this[0].toTupleArray<ExecuteOperationCallOpJoinSplitTxsStruct>();
  }

  get refundAddr(): ExecuteOperationCallOpRefundAddrStruct {
    return changetype<ExecuteOperationCallOpRefundAddrStruct>(
      this[1].toTuple()
    );
  }

  get encodedRefundAssets(): Array<
    ExecuteOperationCallOpEncodedRefundAssetsStruct
  > {
    return this[2].toTupleArray<
      ExecuteOperationCallOpEncodedRefundAssetsStruct
    >();
  }

  get actions(): Array<ExecuteOperationCallOpActionsStruct> {
    return this[3].toTupleArray<ExecuteOperationCallOpActionsStruct>();
  }

  get verificationGasLimit(): BigInt {
    return this[4].toBigInt();
  }

  get executionGasLimit(): BigInt {
    return this[5].toBigInt();
  }

  get maxNumRefunds(): BigInt {
    return this[6].toBigInt();
  }

  get gasPrice(): BigInt {
    return this[7].toBigInt();
  }
}

export class ExecuteOperationCallOpJoinSplitTxsStruct extends ethereum.Tuple {
  get commitmentTreeRoot(): BigInt {
    return this[0].toBigInt();
  }

  get nullifierA(): BigInt {
    return this[1].toBigInt();
  }

  get nullifierB(): BigInt {
    return this[2].toBigInt();
  }

  get newNoteACommitment(): BigInt {
    return this[3].toBigInt();
  }

  get newNoteBCommitment(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get encodedAsset(): ExecuteOperationCallOpJoinSplitTxsEncodedAssetStruct {
    return changetype<ExecuteOperationCallOpJoinSplitTxsEncodedAssetStruct>(
      this[6].toTuple()
    );
  }

  get publicSpend(): BigInt {
    return this[7].toBigInt();
  }

  get newNoteATransmission(): ExecuteOperationCallOpJoinSplitTxsNewNoteATransmissionStruct {
    return changetype<
      ExecuteOperationCallOpJoinSplitTxsNewNoteATransmissionStruct
    >(this[8].toTuple());
  }

  get newNoteBTransmission(): ExecuteOperationCallOpJoinSplitTxsNewNoteBTransmissionStruct {
    return changetype<
      ExecuteOperationCallOpJoinSplitTxsNewNoteBTransmissionStruct
    >(this[9].toTuple());
  }
}

export class ExecuteOperationCallOpJoinSplitTxsEncodedAssetStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class ExecuteOperationCallOpJoinSplitTxsNewNoteATransmissionStruct extends ethereum.Tuple {
  get owner(): ExecuteOperationCallOpJoinSplitTxsNewNoteATransmissionOwnerStruct {
    return changetype<
      ExecuteOperationCallOpJoinSplitTxsNewNoteATransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExecuteOperationCallOpJoinSplitTxsNewNoteATransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExecuteOperationCallOpJoinSplitTxsNewNoteBTransmissionStruct extends ethereum.Tuple {
  get owner(): ExecuteOperationCallOpJoinSplitTxsNewNoteBTransmissionOwnerStruct {
    return changetype<
      ExecuteOperationCallOpJoinSplitTxsNewNoteBTransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExecuteOperationCallOpJoinSplitTxsNewNoteBTransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExecuteOperationCallOpRefundAddrStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class ExecuteOperationCallOpEncodedRefundAssetsStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class ExecuteOperationCallOpActionsStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get encodedFunction(): Bytes {
    return this[1].toBytes();
  }
}

export class ExecuteOperationCallOpResultStruct extends ethereum.Tuple {
  get opProcessed(): boolean {
    return this[0].toBoolean();
  }

  get failureReason(): string {
    return this[1].toString();
  }

  get callSuccesses(): Array<boolean> {
    return this[2].toBooleanArray();
  }

  get callResults(): Array<Bytes> {
    return this[3].toBytesArray();
  }

  get verificationGas(): BigInt {
    return this[4].toBigInt();
  }

  get executionGas(): BigInt {
    return this[5].toBigInt();
  }

  get numRefunds(): BigInt {
    return this[6].toBigInt();
  }
}

export class FillBatchWithZerosCall extends ethereum.Call {
  get inputs(): FillBatchWithZerosCall__Inputs {
    return new FillBatchWithZerosCall__Inputs(this);
  }

  get outputs(): FillBatchWithZerosCall__Outputs {
    return new FillBatchWithZerosCall__Outputs(this);
  }
}

export class FillBatchWithZerosCall__Inputs {
  _call: FillBatchWithZerosCall;

  constructor(call: FillBatchWithZerosCall) {
    this._call = call;
  }
}

export class FillBatchWithZerosCall__Outputs {
  _call: FillBatchWithZerosCall;

  constructor(call: FillBatchWithZerosCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get joinSplitVerifier(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get subtreeUpdateVerifier(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ProcessBundleCall extends ethereum.Call {
  get inputs(): ProcessBundleCall__Inputs {
    return new ProcessBundleCall__Inputs(this);
  }

  get outputs(): ProcessBundleCall__Outputs {
    return new ProcessBundleCall__Outputs(this);
  }
}

export class ProcessBundleCall__Inputs {
  _call: ProcessBundleCall;

  constructor(call: ProcessBundleCall) {
    this._call = call;
  }

  get bundle(): ProcessBundleCallBundleStruct {
    return changetype<ProcessBundleCallBundleStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ProcessBundleCall__Outputs {
  _call: ProcessBundleCall;

  constructor(call: ProcessBundleCall) {
    this._call = call;
  }

  get value0(): Array<ProcessBundleCallValue0Struct> {
    return this._call.outputValues[0].value.toTupleArray<
      ProcessBundleCallValue0Struct
    >();
  }
}

export class ProcessBundleCallBundleStruct extends ethereum.Tuple {
  get operations(): Array<ProcessBundleCallBundleOperationsStruct> {
    return this[0].toTupleArray<ProcessBundleCallBundleOperationsStruct>();
  }
}

export class ProcessBundleCallBundleOperationsStruct extends ethereum.Tuple {
  get joinSplitTxs(): Array<
    ProcessBundleCallBundleOperationsJoinSplitTxsStruct
  > {
    return this[0].toTupleArray<
      ProcessBundleCallBundleOperationsJoinSplitTxsStruct
    >();
  }

  get refundAddr(): ProcessBundleCallBundleOperationsRefundAddrStruct {
    return changetype<ProcessBundleCallBundleOperationsRefundAddrStruct>(
      this[1].toTuple()
    );
  }

  get encodedRefundAssets(): Array<
    ProcessBundleCallBundleOperationsEncodedRefundAssetsStruct
  > {
    return this[2].toTupleArray<
      ProcessBundleCallBundleOperationsEncodedRefundAssetsStruct
    >();
  }

  get actions(): Array<ProcessBundleCallBundleOperationsActionsStruct> {
    return this[3].toTupleArray<
      ProcessBundleCallBundleOperationsActionsStruct
    >();
  }

  get verificationGasLimit(): BigInt {
    return this[4].toBigInt();
  }

  get executionGasLimit(): BigInt {
    return this[5].toBigInt();
  }

  get maxNumRefunds(): BigInt {
    return this[6].toBigInt();
  }

  get gasPrice(): BigInt {
    return this[7].toBigInt();
  }
}

export class ProcessBundleCallBundleOperationsJoinSplitTxsStruct extends ethereum.Tuple {
  get commitmentTreeRoot(): BigInt {
    return this[0].toBigInt();
  }

  get nullifierA(): BigInt {
    return this[1].toBigInt();
  }

  get nullifierB(): BigInt {
    return this[2].toBigInt();
  }

  get newNoteACommitment(): BigInt {
    return this[3].toBigInt();
  }

  get newNoteBCommitment(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get encodedAsset(): ProcessBundleCallBundleOperationsJoinSplitTxsEncodedAssetStruct {
    return changetype<
      ProcessBundleCallBundleOperationsJoinSplitTxsEncodedAssetStruct
    >(this[6].toTuple());
  }

  get publicSpend(): BigInt {
    return this[7].toBigInt();
  }

  get newNoteATransmission(): ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteATransmissionStruct {
    return changetype<
      ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteATransmissionStruct
    >(this[8].toTuple());
  }

  get newNoteBTransmission(): ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteBTransmissionStruct {
    return changetype<
      ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteBTransmissionStruct
    >(this[9].toTuple());
  }
}

export class ProcessBundleCallBundleOperationsJoinSplitTxsEncodedAssetStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteATransmissionStruct extends ethereum.Tuple {
  get owner(): ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteATransmissionOwnerStruct {
    return changetype<
      ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteATransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteATransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteBTransmissionStruct extends ethereum.Tuple {
  get owner(): ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteBTransmissionOwnerStruct {
    return changetype<
      ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteBTransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class ProcessBundleCallBundleOperationsJoinSplitTxsNewNoteBTransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class ProcessBundleCallBundleOperationsRefundAddrStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class ProcessBundleCallBundleOperationsEncodedRefundAssetsStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class ProcessBundleCallBundleOperationsActionsStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get encodedFunction(): Bytes {
    return this[1].toBytes();
  }
}

export class ProcessBundleCallValue0Struct extends ethereum.Tuple {
  get opProcessed(): boolean {
    return this[0].toBoolean();
  }

  get failureReason(): string {
    return this[1].toString();
  }

  get callSuccesses(): Array<boolean> {
    return this[2].toBooleanArray();
  }

  get callResults(): Array<Bytes> {
    return this[3].toBytesArray();
  }

  get verificationGas(): BigInt {
    return this[4].toBigInt();
  }

  get executionGas(): BigInt {
    return this[5].toBigInt();
  }

  get numRefunds(): BigInt {
    return this[6].toBigInt();
  }
}

export class ProcessOperationCall extends ethereum.Call {
  get inputs(): ProcessOperationCall__Inputs {
    return new ProcessOperationCall__Inputs(this);
  }

  get outputs(): ProcessOperationCall__Outputs {
    return new ProcessOperationCall__Outputs(this);
  }
}

export class ProcessOperationCall__Inputs {
  _call: ProcessOperationCall;

  constructor(call: ProcessOperationCall) {
    this._call = call;
  }

  get op(): ProcessOperationCallOpStruct {
    return changetype<ProcessOperationCallOpStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get verificationGasForOp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get bundler(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ProcessOperationCall__Outputs {
  _call: ProcessOperationCall;

  constructor(call: ProcessOperationCall) {
    this._call = call;
  }

  get opResult(): ProcessOperationCallOpResultStruct {
    return changetype<ProcessOperationCallOpResultStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class ProcessOperationCallOpStruct extends ethereum.Tuple {
  get joinSplitTxs(): Array<ProcessOperationCallOpJoinSplitTxsStruct> {
    return this[0].toTupleArray<ProcessOperationCallOpJoinSplitTxsStruct>();
  }

  get refundAddr(): ProcessOperationCallOpRefundAddrStruct {
    return changetype<ProcessOperationCallOpRefundAddrStruct>(
      this[1].toTuple()
    );
  }

  get encodedRefundAssets(): Array<
    ProcessOperationCallOpEncodedRefundAssetsStruct
  > {
    return this[2].toTupleArray<
      ProcessOperationCallOpEncodedRefundAssetsStruct
    >();
  }

  get actions(): Array<ProcessOperationCallOpActionsStruct> {
    return this[3].toTupleArray<ProcessOperationCallOpActionsStruct>();
  }

  get verificationGasLimit(): BigInt {
    return this[4].toBigInt();
  }

  get executionGasLimit(): BigInt {
    return this[5].toBigInt();
  }

  get maxNumRefunds(): BigInt {
    return this[6].toBigInt();
  }

  get gasPrice(): BigInt {
    return this[7].toBigInt();
  }
}

export class ProcessOperationCallOpJoinSplitTxsStruct extends ethereum.Tuple {
  get commitmentTreeRoot(): BigInt {
    return this[0].toBigInt();
  }

  get nullifierA(): BigInt {
    return this[1].toBigInt();
  }

  get nullifierB(): BigInt {
    return this[2].toBigInt();
  }

  get newNoteACommitment(): BigInt {
    return this[3].toBigInt();
  }

  get newNoteBCommitment(): BigInt {
    return this[4].toBigInt();
  }

  get proof(): Array<BigInt> {
    return this[5].toBigIntArray();
  }

  get encodedAsset(): ProcessOperationCallOpJoinSplitTxsEncodedAssetStruct {
    return changetype<ProcessOperationCallOpJoinSplitTxsEncodedAssetStruct>(
      this[6].toTuple()
    );
  }

  get publicSpend(): BigInt {
    return this[7].toBigInt();
  }

  get newNoteATransmission(): ProcessOperationCallOpJoinSplitTxsNewNoteATransmissionStruct {
    return changetype<
      ProcessOperationCallOpJoinSplitTxsNewNoteATransmissionStruct
    >(this[8].toTuple());
  }

  get newNoteBTransmission(): ProcessOperationCallOpJoinSplitTxsNewNoteBTransmissionStruct {
    return changetype<
      ProcessOperationCallOpJoinSplitTxsNewNoteBTransmissionStruct
    >(this[9].toTuple());
  }
}

export class ProcessOperationCallOpJoinSplitTxsEncodedAssetStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class ProcessOperationCallOpJoinSplitTxsNewNoteATransmissionStruct extends ethereum.Tuple {
  get owner(): ProcessOperationCallOpJoinSplitTxsNewNoteATransmissionOwnerStruct {
    return changetype<
      ProcessOperationCallOpJoinSplitTxsNewNoteATransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class ProcessOperationCallOpJoinSplitTxsNewNoteATransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class ProcessOperationCallOpJoinSplitTxsNewNoteBTransmissionStruct extends ethereum.Tuple {
  get owner(): ProcessOperationCallOpJoinSplitTxsNewNoteBTransmissionOwnerStruct {
    return changetype<
      ProcessOperationCallOpJoinSplitTxsNewNoteBTransmissionOwnerStruct
    >(this[0].toTuple());
  }

  get encappedKey(): BigInt {
    return this[1].toBigInt();
  }

  get encryptedNonce(): BigInt {
    return this[2].toBigInt();
  }

  get encryptedValue(): BigInt {
    return this[3].toBigInt();
  }
}

export class ProcessOperationCallOpJoinSplitTxsNewNoteBTransmissionOwnerStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class ProcessOperationCallOpRefundAddrStruct extends ethereum.Tuple {
  get h1X(): BigInt {
    return this[0].toBigInt();
  }

  get h1Y(): BigInt {
    return this[1].toBigInt();
  }

  get h2X(): BigInt {
    return this[2].toBigInt();
  }

  get h2Y(): BigInt {
    return this[3].toBigInt();
  }
}

export class ProcessOperationCallOpEncodedRefundAssetsStruct extends ethereum.Tuple {
  get encodedAssetAddr(): BigInt {
    return this[0].toBigInt();
  }

  get encodedAssetId(): BigInt {
    return this[1].toBigInt();
  }
}

export class ProcessOperationCallOpActionsStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get encodedFunction(): Bytes {
    return this[1].toBytes();
  }
}

export class ProcessOperationCallOpResultStruct extends ethereum.Tuple {
  get opProcessed(): boolean {
    return this[0].toBoolean();
  }

  get failureReason(): string {
    return this[1].toString();
  }

  get callSuccesses(): Array<boolean> {
    return this[2].toBooleanArray();
  }

  get callResults(): Array<Bytes> {
    return this[3].toBytesArray();
  }

  get verificationGas(): BigInt {
    return this[4].toBigInt();
  }

  get executionGas(): BigInt {
    return this[5].toBigInt();
  }

  get numRefunds(): BigInt {
    return this[6].toBigInt();
  }
}
