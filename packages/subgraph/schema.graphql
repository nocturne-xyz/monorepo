enum DepositEventType {
  Instantiated
  Retrieved
  Processed
}

type DepositEvent @entity(immutable: true) {
  id: ID!
  type: DepositEventType!
  spender: Bytes!
  encodedAssetAddr: BigInt!
  encodedAssetId: BigInt!
  value: BigInt!
  depositAddrH1: BigInt!
  depositAddrH2: BigInt!
  nonce: BigInt!
  gasCompensation: BigInt!
}

enum DepositRequestStatus {
  Pending
  Completed
  Retrievied
}

type DepositRequest @entity(immutable: false) {
  id: ID!
  status: DepositRequestStatus!
  spender: Bytes!
  encodedAssetAddr: BigInt!
  encodedAssetId: BigInt!
  value: BigInt!
  depositAddrH1: BigInt!
  depositAddrH2: BigInt!
  nonce: BigInt!
  gasCompensation: BigInt!
}

type EncodedOrEncryptedNote @entity(immutable: true) {
  id: ID!
  merkleIndex: BigInt!
  note: EncodedNote
  encryptedNote: EncryptedNote
}

type EncodedNote @entity(immutable: true) {
  id: ID!
  ownerH1: BigInt!
  ownerH2: BigInt!
  nonce: BigInt!
  encodedAssetAddr: BigInt!
  encodedAssetId: BigInt!
  value: BigInt!
}

type EncryptedNote @entity(immutable: true) {
  id: ID!
  ownerH1: BigInt!
  ownerH2: BigInt!
  encappedKey: BigInt!
  encryptedNonce: BigInt!
  encryptedValue: BigInt!
  encodedAssetAddr: BigInt!
  encodedAssetId: BigInt!
  commitment: BigInt!
}

type Nullifier @entity(immutable: true) {
  id: ID!
  nullifier: BigInt!
}

type SubtreeCommit @entity(immutable: true) {
  id: ID!
  newRoot: BigInt!
  subtreeBatchOffset: BigInt!
}

type FilledBatchWithZerosEvent @entity(immutable: true) {
  id: ID!
  startIndex: BigInt!
  numZeros: BigInt!
}

type TreeInsertionEvent @entity(immutable: true) {
  id: ID!
  encodedOrEncryptedNote: EncodedOrEncryptedNote
  filledBatchWithZerosEvent: FilledBatchWithZerosEvent
}

type SDKEvent @entity(immutable: true) {
  id: ID!
  encodedOrEncryptedNote: EncodedOrEncryptedNote
  nullifier: Nullifier
}
