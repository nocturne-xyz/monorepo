/* eslint-disable */
import {
  JoinSplitInputs,
  JoinSplitProofWithPublicSignals,
  JoinSplitProver,
} from "./joinsplit";
import {
  SubtreeUpdateInputs,
  SubtreeUpdateProofWithPublicSignals,
  SubtreeUpdateProver,
} from "./subtreeUpdate";

export class MockJoinSplitProver implements JoinSplitProver {
  async proveJoinSplit(
    inputs: JoinSplitInputs
  ): Promise<JoinSplitProofWithPublicSignals> {
    return {
      proof: {
        pi_a: [
          20148859921237761363742774855941154808335415552869275945279948468467090566786n,
          5126664791178118716834686543903468817358537705313338290287341290394640274419n,
          1n,
        ],
        pi_b: [
          [
            10751847241429059699487929668742999902794008655384839747797592475261953796806n,
            3979942481233656268098251824459102373206996462231500654550286122685530225398n,
          ],
          [
            21530686740891510877832010717689029892607908518422763954387911095027971796154n,
            16064232641910250411038473949259234074206287385378336187227810530910995318931n,
          ],
          [1n, 0n],
        ],
        pi_c: [
          11620887978209766164210715754014431969830358653429972400215452103810076536454n,
          16782113765937069633749631780269965212965980619244111262013660922998410636051n,
          1n,
        ],
        protocol: "groth16",
        curve: "bn128",
      },
      publicSignals: [
        5729615567974098442889289201234334300930195797756167904513780612000007901810n,
        7495436769027916103412035335651487393013681852193865276533727805587734334673n,
        18835082620178957576906944473372601980377101179182942392594520581093978689773n,
        100n,
        17987915904996261106494993079888404427489891134921594094629556487036554657109n,
        21418066679522083038508406991065855452209399041887184239743876780039053260940n,
        5300075594648439688637418743511986361473393827914456908330597693302171790617n,
        15733664786028247377988275942959643256055608471909987061751746037991239534233n,
        12345n,
        5n,
        904625697166532776746648320380374280103671755200316906558262375061821325322n,
        11708092045801765330869826061767369589854582213754379842157013559871860958542n,
        198911598573622467903249148071301969804450255104294732115370933399972997521n,
      ],
    };
  }

  async verifyJoinSplitProof({
    proof,
    publicSignals,
  }: JoinSplitProofWithPublicSignals): Promise<boolean> {
    return true;
  }
}

export class MockSubtreeUpdateProver implements SubtreeUpdateProver {
  async proveSubtreeUpdate(
    inputs: SubtreeUpdateInputs
  ): Promise<SubtreeUpdateProofWithPublicSignals> {
    return {
      proof: {
        pi_a: [
          21088015562295919926803007890523568907362626291725881492664119321070036198844n,
          18570299120553316626792639026460482794951743347320028016548836843484744601335n,
          1n,
        ],
        pi_b: [
          [
            18399076212437565331601882738293618999410619553961059546664055085420817858275n,
            661678711464783610447054290055633914866586497386275419245879093835853047122n,
          ],
          [
            8762533967649298463154446960143798824114623972911546605629977597809947169997n,
            10802211552993792951695387914431138160620068296816508977496234075923402867880n,
          ],
          [1n, 0n],
        ],
        pi_c: [
          13813928389981190258664125494752022882655825809087555555723631827909962395616n,
          15050355748469127923587844385785301278607126500738632263544898455939385976127n,
          1n,
        ],
        protocol: "groth16",
        curve: "bn128",
      },
      publicSignals: [
        21443572485391568159800782191812935835534334817699172242223315142338162256601n,
        5509827880219772731374375585669724524727973663155755687024864114523504664635n,
        0n,
        12722949430739793925828359129762327968511013213886745107919442221783126903327n,
      ],
    };
  }

  async verifySubtreeUpdate({
    proof,
    publicSignals,
  }: SubtreeUpdateProofWithPublicSignals): Promise<boolean> {
    return true;
  }
}
