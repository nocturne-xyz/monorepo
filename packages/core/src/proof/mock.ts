/* eslint-disable */
import {
  JoinSplitInputs,
  JoinSplitProofWithPublicSignals,
  JoinSplitProver,
} from "./joinsplit";
import {
  SubtreeUpdateInputs,
  SubtreeUpdateProofWithPublicSignals,
  SubtreeUpdateProver,
} from "./subtreeUpdate";

export class MockJoinSplitProver implements JoinSplitProver {
  async proveJoinSplit(
    inputs: JoinSplitInputs
  ): Promise<JoinSplitProofWithPublicSignals> {
    return {
      proof: {
        pi_a: [
          11789423142689916307638509397515605868354708559911989280864977187023064976844n,
          16311121579988246471388906993042157003951134658931769918536310980600682673044n,
          1n,
        ],
        pi_b: [
          [
            15128575193810861713456123452853453497095649354373351382865039934887336052529n,
            4166314161628280057121457563415235460846799974523959175802708036732108913414n,
          ],
          [
            11871011947362624035760099090911634721347100787207706441859623645725157363937n,
            3038406674883025581685753696351625501625198088632702070031411348127944187080n,
          ],
          [1n, 0n],
        ],
        pi_c: [
          13534618038817145939668588419373566018999981584420349182492203603510868548862n,
          17296853299126016236632097705065139628776320173101726523693802865937465060296n,
          1n,
        ],
        protocol: "groth16",
        curve: "bn128",
      },
      publicSignals: [
        2385858642337575267667142167836691534502032819548811476276174128379302021346n,
        1722911120075096725439730979925105646335339101844061270543010608916302024875n,
        19961188502208322160576819953556445554791121617883661344803008878417171045398n,
        0n,
        20693109534485053343840654702719792632962076144745354630644860411318497671468n,
        17422753492122784263837700202281548544610455588855408516523290605102170274754n,
        8454075204933086912038532500799627855062976138683113951684870449638329106038n,
        // TODO regenerate this
        69420n,
        12345n,
        904625697166532776746648320380374280103671755200316906558262375061821325322n,
        5n,
        17015266228852230930481811866451369496648578694211554465168177552266341210441n,
        13574065108341657748822597310087875404590042249296126002193896231105043311588n,
      ],
    };
  }

  async verifyJoinSplitProof({
    proof,
    publicSignals,
  }: JoinSplitProofWithPublicSignals): Promise<boolean> {
    return true;
  }
}

export class MockSubtreeUpdateProver implements SubtreeUpdateProver {
  async proveSubtreeUpdate(
    inputs: SubtreeUpdateInputs
  ): Promise<SubtreeUpdateProofWithPublicSignals> {
    return {
      proof: {
        pi_a: [
          21088015562295919926803007890523568907362626291725881492664119321070036198844n,
          18570299120553316626792639026460482794951743347320028016548836843484744601335n,
          1n,
        ],
        pi_b: [
          [
            18399076212437565331601882738293618999410619553961059546664055085420817858275n,
            661678711464783610447054290055633914866586497386275419245879093835853047122n,
          ],
          [
            8762533967649298463154446960143798824114623972911546605629977597809947169997n,
            10802211552993792951695387914431138160620068296816508977496234075923402867880n,
          ],
          [1n, 0n],
        ],
        pi_c: [
          13813928389981190258664125494752022882655825809087555555723631827909962395616n,
          15050355748469127923587844385785301278607126500738632263544898455939385976127n,
          1n,
        ],
        protocol: "groth16",
        curve: "bn128",
      },
      publicSignals: [
        21443572485391568159800782191812935835534334817699172242223315142338162256601n,
        5509827880219772731374375585669724524727973663155755687024864114523504664635n,
        0n,
        12722949430739793925828359129762327968511013213886745107919442221783126903327n,
      ],
    };
  }

  async verifySubtreeUpdate({
    proof,
    publicSignals,
  }: SubtreeUpdateProofWithPublicSignals): Promise<boolean> {
    return true;
  }
}
