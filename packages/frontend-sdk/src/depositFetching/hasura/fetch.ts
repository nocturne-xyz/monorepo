import { AssetTrait, ArrayElem, Address, TotalEntityIndexTrait } from "@nocturne-xyz/core";
import { FetchDepositRequestsQuery } from "./gql/autogenerated/graphql";
import { BigNumber } from "ethers";
import { DisplayDepositRequestWithMetadataAndStatus, parseOnChainDepositRequestStatus } from "../../types";

export function depositRequestResponseToDepositRequestWithMetadata(spender: Address, depositRequestResponse: ArrayElem<FetchDepositRequestsQuery["deposit_request"]>): DisplayDepositRequestWithMetadataAndStatus {
  const {
    encoded_asset_addr,
    encoded_asset_id,
    value,
    nonce,
    status,
    deposit_addr_h1,
    deposit_addr_h2,
    gas_compensation,
    instantiation_tx_hash,
    completion_tx_hash,
    retrieval_tx_hash,
    created_at_total_entity_index,
  } = depositRequestResponse;

  const asset = AssetTrait.decode({
    encodedAssetAddr: BigInt(encoded_asset_addr as string),
    encodedAssetId: BigInt(encoded_asset_id as string),
  });

  return {
    spender: spender,
    asset: {
      ...asset,
      id: BigNumber.from(asset.id),
    },
    value: BigNumber.from(value),
    depositAddr: {
      h1: BigNumber.from(deposit_addr_h1),
      h2: BigNumber.from(deposit_addr_h2),
    },
    nonce: BigNumber.from(nonce),
    gasCompensation: BigNumber.from(gas_compensation),
    txHashInstantiated: instantiation_tx_hash ? hexStringFromBytea(instantiation_tx_hash as string) : undefined,
    txHashCompleted: completion_tx_hash ? hexStringFromBytea(completion_tx_hash as string) : undefined,
    txHashRetrieved: retrieval_tx_hash ? hexStringFromBytea(retrieval_tx_hash as string) : undefined,
    createdAtBlock: TotalEntityIndexTrait.convertToBlockNumber(BigInt(created_at_total_entity_index as string)),
    onChainStatus: status ? parseOnChainDepositRequestStatus(status) : undefined,
  };
}

export function hexToBytea(hex: string): string {
  // convert to lowercase
  hex = hex.toLowerCase();
  return "\\x" + hex.slice(2);
}

function hexStringFromBytea(bytea: string): Address {
  return "0x" + bytea.slice(2);
}

